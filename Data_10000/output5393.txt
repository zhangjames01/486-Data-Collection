{"kind": "Listing", "data": {"after": "t1_cob5tls", "dist": 25, "modhash": null, "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2qhty", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What can and can't microcontrollers currently do?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "DSP", "link_author": "zt5um", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "gpo8q02", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 6, "can_mod_post": false, "send_replies": true, "parent_id": "t1_gpo89lo", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "For example this one https://www.tindie.com/products/electrotechnique/tsynth-teensy-based-diy-programmable-poly-synth/\n\nAlso there is an active thread on the Teensy forum about a fully fledged synth. Also one on a Moog ladder filter implementation.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;For example this one &lt;a href=\"https://www.tindie.com/products/electrotechnique/tsynth-teensy-based-diy-programmable-poly-synth/\"&gt;https://www.tindie.com/products/electrotechnique/tsynth-teensy-based-diy-programmable-poly-synth/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also there is an active thread on the Teensy forum about a fully fledged synth. Also one on a Moog ladder filter implementation.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_lxo295", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/DSP/comments/lxo295/what_can_and_cant_microcontrollers_currently_do/gpo8q02/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/DSP/comments/lxo295/what_can_and_cant_microcontrollers_currently_do/", "name": "t1_gpo8q02", "author_flair_template_id": null, "subreddit_name_prefixed": "r/DSP", "author_flair_text": null, "treatment_tags": [], "created": 1614878217.0, "created_utc": 1614878217.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/DSP/comments/lxo295/what_can_and_cant_microcontrollers_currently_do/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qhty", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What can and can't microcontrollers currently do?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "DSP", "link_author": "zt5um", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "gpo89lo", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 6, "can_mod_post": false, "send_replies": true, "parent_id": "t3_lxo295", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "There are a couple of Teensy based polysynths. Even with the older 3.6.\nIIRC the daisy and Teensy 4 both use the Cortex M7. So yes, polysynth or sample player are quite easy to achieve.\n\nUpdate: Have you seen the Pollen(8) made on the Daisy?", "edited": 1614882042.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are a couple of Teensy based polysynths. Even with the older 3.6.\nIIRC the daisy and Teensy 4 both use the Cortex M7. So yes, polysynth or sample player are quite easy to achieve.&lt;/p&gt;\n\n&lt;p&gt;Update: Have you seen the Pollen(8) made on the Daisy?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_lxo295", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/DSP/comments/lxo295/what_can_and_cant_microcontrollers_currently_do/gpo89lo/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/DSP/comments/lxo295/what_can_and_cant_microcontrollers_currently_do/", "name": "t1_gpo89lo", "author_flair_template_id": null, "subreddit_name_prefixed": "r/DSP", "author_flair_text": null, "treatment_tags": [], "created": 1614878017.0, "created_utc": 1614878017.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/DSP/comments/lxo295/what_can_and_cant_microcontrollers_currently_do/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_3cf47", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "[deleted by user]", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Zig", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "fyt5weh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 3, "can_mod_post": false, "send_replies": true, "parent_id": "t3_hv6byd", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Nice. Hope to have time to look into this soon.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nice. Hope to have time to look into this soon.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_hv6byd", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Zig/comments/hv6byd/deleted_by_user/fyt5weh/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Zig/comments/hv6byd/deleted_by_user/", "name": "t1_fyt5weh", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Zig", "author_flair_text": null, "treatment_tags": [], "created": 1595368024.0, "created_utc": 1595368024.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Zig/comments/hv6byd/deleted_by_user/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1k", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "How do you guys keep up with your notes and stay organized?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "productivity", "link_author": "Vasary", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "fgsg1lu", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 62, "can_mod_post": false, "send_replies": true, "parent_id": "t1_ffeur2q", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Not checking off these note \"tasks\" works for me. Admittedly, it's  not great, it triggers my OCD, but still better than having to switch between apps. :)\n\nI use the search frequently, so even if I \"finished\" a note, I still can find it.\n\nTo be more specific. I have a \"project\" called Quotes where each task is just a quote. In my app (TickTick) I can hide these task from the big, main task list.\n\nThings, if actionable, for future use I'd put into a GTD-like \"Someday/Maybe\" list.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not checking off these note &amp;quot;tasks&amp;quot; works for me. Admittedly, it&amp;#39;s  not great, it triggers my OCD, but still better than having to switch between apps. :)&lt;/p&gt;\n\n&lt;p&gt;I use the search frequently, so even if I &amp;quot;finished&amp;quot; a note, I still can find it.&lt;/p&gt;\n\n&lt;p&gt;To be more specific. I have a &amp;quot;project&amp;quot; called Quotes where each task is just a quote. In my app (TickTick) I can hide these task from the big, main task list.&lt;/p&gt;\n\n&lt;p&gt;Things, if actionable, for future use I&amp;#39;d put into a GTD-like &amp;quot;Someday/Maybe&amp;quot; list.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_eszlth", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/productivity/comments/eszlth/how_do_you_guys_keep_up_with_your_notes_and_stay/fgsg1lu/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/productivity/comments/eszlth/how_do_you_guys_keep_up_with_your_notes_and_stay/", "name": "t1_fgsg1lu", "author_flair_template_id": null, "subreddit_name_prefixed": "r/productivity", "author_flair_text": null, "treatment_tags": [], "created": 1581083336.0, "created_utc": 1581083336.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/productivity/comments/eszlth/how_do_you_guys_keep_up_with_your_notes_and_stay/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1k", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "How do you guys keep up with your notes and stay organized?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "productivity", "link_author": "Vasary", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ffdbf8v", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 62, "can_mod_post": false, "send_replies": true, "parent_id": "t3_eszlth", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Heard a lot of people using Evernote an linking notes there in Todoist tasks. \n\nPersonally I am just getting into the habit of using a task manager app and rather not use as second app. So I just add tasks containing notes or attached files to the projects list or a reference list. \n\nBut I\u2019m interested in a lean way to organise and collaboratively work on notes.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Heard a lot of people using Evernote an linking notes there in Todoist tasks. &lt;/p&gt;\n\n&lt;p&gt;Personally I am just getting into the habit of using a task manager app and rather not use as second app. So I just add tasks containing notes or attached files to the projects list or a reference list. &lt;/p&gt;\n\n&lt;p&gt;But I\u2019m interested in a lean way to organise and collaboratively work on notes.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_eszlth", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/productivity/comments/eszlth/how_do_you_guys_keep_up_with_your_notes_and_stay/ffdbf8v/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/productivity/comments/eszlth/how_do_you_guys_keep_up_with_your_notes_and_stay/", "name": "t1_ffdbf8v", "author_flair_template_id": null, "subreddit_name_prefixed": "r/productivity", "author_flair_text": null, "treatment_tags": [], "created": 1579817266.0, "created_utc": 1579817266.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/productivity/comments/eszlth/how_do_you_guys_keep_up_with_your_notes_and_stay/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Is there a way to modify audio input in real time?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "dby7ihx", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 4, "can_mod_post": false, "send_replies": true, "parent_id": "t3_5lon46", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Try out pyo. IIRC there is even a tutorial on a guitar \"pedal\" from someone else online.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Try out pyo. IIRC there is even a tutorial on a guitar &amp;quot;pedal&amp;quot; from someone else online.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_5lon46", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/5lon46/is_there_a_way_to_modify_audio_input_in_real_time/dby7ihx/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/5lon46/is_there_a_way_to_modify_audio_input_in_real_time/", "name": "t1_dby7ihx", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1483464142.0, "created_utc": 1483464142.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/5lon46/is_there_a_way_to_modify_audio_input_in_real_time/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Specific python audio module?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "PKtheworldisaplace", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "dakfckh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 5, "can_mod_post": false, "send_replies": true, "parent_id": "t3_5feh2f", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Check out pyo. Simple to use yet very efficient.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Check out pyo. Simple to use yet very efficient.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_5feh2f", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/5feh2f/specific_python_audio_module/dakfckh/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/5feh2f/specific_python_audio_module/", "name": "t1_dakfckh", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1480423565.0, "created_utc": 1480423565.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/5feh2f/specific_python_audio_module/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Good library to abstract information about songs", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "digger625", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d9u5spa", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 2, "can_mod_post": false, "send_replies": true, "parent_id": "t3_5c3aam", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "You might wanna look into the librosa library and the topic of music information retrieval. There's a **lot** to explore.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You might wanna look into the librosa library and the topic of music information retrieval. There&amp;#39;s a &lt;strong&gt;lot&lt;/strong&gt; to explore.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_5c3aam", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/5c3aam/good_library_to_abstract_information_about_songs/d9u5spa/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/5c3aam/good_library_to_abstract_information_about_songs/", "name": "t1_d9u5spa", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1478773845.0, "created_utc": 1478773845.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/5c3aam/good_library_to_abstract_information_about_songs/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Real time FIR filter sound playing from the sound card to the speaker", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "Gurder", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d8pbg5y", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 4, "can_mod_post": false, "send_replies": true, "parent_id": "t3_573nbj", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Try [pyo](http://ajaxsoundstudio.com/software/pyo/).\nDoes realtime signal processing, especially for audio.\n\nHas been quite a while since I last used it, but it worked like a charm. \nIf you do not need to stay in the Python realm, dedicated languages like Faust, pd, etc. might suit your needs better.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Try &lt;a href=\"http://ajaxsoundstudio.com/software/pyo/\"&gt;pyo&lt;/a&gt;.\nDoes realtime signal processing, especially for audio.&lt;/p&gt;\n\n&lt;p&gt;Has been quite a while since I last used it, but it worked like a charm. \nIf you do not need to stay in the Python realm, dedicated languages like Faust, pd, etc. might suit your needs better.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_573nbj", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/573nbj/real_time_fir_filter_sound_playing_from_the_sound/d8pbg5y/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/573nbj/real_time_fir_filter_sound_playing_from_the_sound/", "name": "t1_d8pbg5y", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1476304911.0, "created_utc": 1476304911.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/573nbj/real_time_fir_filter_sound_playing_from_the_sound/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What do you use for source code documentation?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "jupake", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d49c7b1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 18, "can_mod_post": false, "send_replies": true, "parent_id": "t3_4o13nu", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Seems relevant.\n\nhttp://wwoods.github.io/2016/06/09/easy-sphinx-documentation-without-the-boilerplate/", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Seems relevant.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://wwoods.github.io/2016/06/09/easy-sphinx-documentation-without-the-boilerplate/\"&gt;http://wwoods.github.io/2016/06/09/easy-sphinx-documentation-without-the-boilerplate/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_4o13nu", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/4o13nu/what_do_you_use_for_source_code_documentation/d49c7b1/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/4o13nu/what_do_you_use_for_source_code_documentation/", "name": "t1_d49c7b1", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1465939454.0, "created_utc": 1465939454.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/4o13nu/what_do_you_use_for_source_code_documentation/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Easy Sphinx Documentation Without the Boilerplate", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "waltywalt", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d4403vh", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 1, "can_mod_post": false, "send_replies": true, "parent_id": "t3_4ndvb4", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Thanks for this. Creating all these rst files always felt unpythonic.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Thanks for this. Creating all these rst files always felt unpythonic.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_4ndvb4", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/4ndvb4/easy_sphinx_documentation_without_the_boilerplate/d4403vh/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/4ndvb4/easy_sphinx_documentation_without_the_boilerplate/", "name": "t1_d4403vh", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1465585681.0, "created_utc": 1465585681.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "http://wwoods.github.io/2016/06/09/easy-sphinx-documentation-without-the-boilerplate/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Audio with Python?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "savovs", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d3z53n1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 5, "can_mod_post": false, "send_replies": true, "parent_id": "t1_d3yiccq", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Despite my answer suggesting pyo)\nAbout PD.\nThere is the libpd and the python wrapper which allows you to load pd files and run them with libpd. This also works with kivy so you can have pd on your Android, but I remember it was a really complex and fragile setup last time I done this.\n\nAbout performance. The biggest issue is the latency of the audio server. But with portaudio and Jack support this won't be a problem, unless your soundcard isn't capable of.\nDoing alot of computational work in pure python, well there you are right. But DSP is always hard on the CPU and not just slow in python specifically. Moving the hard parts to C is the goto option that everyone does.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Despite my answer suggesting pyo)\nAbout PD.\nThere is the libpd and the python wrapper which allows you to load pd files and run them with libpd. This also works with kivy so you can have pd on your Android, but I remember it was a really complex and fragile setup last time I done this.&lt;/p&gt;\n\n&lt;p&gt;About performance. The biggest issue is the latency of the audio server. But with portaudio and Jack support this won&amp;#39;t be a problem, unless your soundcard isn&amp;#39;t capable of.\nDoing alot of computational work in pure python, well there you are right. But DSP is always hard on the CPU and not just slow in python specifically. Moving the hard parts to C is the goto option that everyone does.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_4muvfv", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/4muvfv/audio_with_python/d3z53n1/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/4muvfv/audio_with_python/", "name": "t1_d3z53n1", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1465279382.0, "created_utc": 1465279382.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/4muvfv/audio_with_python/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Audio with Python?", "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "savovs", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d3z4ris", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 5, "can_mod_post": false, "send_replies": true, "parent_id": "t3_4muvfv", "score": 3, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "I cannot stress this enough everytime a thread like this comes up. Check out [pyo](http://ajaxsoundstudio.com/software/pyo/). A really good DSP library with portaudio/jack/coreaudio support (so you can use it with win/Linux/Mac).\nIf you know supercollider/max/PD you will feel home. \nI use it even for simple task like playing back audio.\n\nIt all has been done. There is even a blog post where someone did a pyo based guitar pedal on his laptop.\n\nedit: damn autocorrect", "edited": 1465315845.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I cannot stress this enough everytime a thread like this comes up. Check out &lt;a href=\"http://ajaxsoundstudio.com/software/pyo/\"&gt;pyo&lt;/a&gt;. A really good DSP library with portaudio/jack/coreaudio support (so you can use it with win/Linux/Mac).\nIf you know supercollider/max/PD you will feel home. \nI use it even for simple task like playing back audio.&lt;/p&gt;\n\n&lt;p&gt;It all has been done. There is even a blog post where someone did a pyo based guitar pedal on his laptop.&lt;/p&gt;\n\n&lt;p&gt;edit: damn autocorrect&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_4muvfv", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/4muvfv/audio_with_python/d3z4ris/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/4muvfv/audio_with_python/", "name": "t1_d3z4ris", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1465278581.0, "created_utc": 1465278581.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/4muvfv/audio_with_python/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "An experiment to run Go code directly from Python", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "karangoeluw", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d3ynbkk", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 3, "can_mod_post": false, "send_replies": true, "parent_id": "t1_d3xmy5k", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "No offense, but why use C if you can use Fortran.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No offense, but why use C if you can use Fortran.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_4mpitu", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/4mpitu/an_experiment_to_run_go_code_directly_from_python/d3ynbkk/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/4mpitu/an_experiment_to_run_go_code_directly_from_python/", "name": "t1_d3ynbkk", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1465250739.0, "created_utc": 1465250739.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://github.com/karan/libfib"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "How to Approximate Named-Entity Recognition", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "cruyff8", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d2w6lo9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 5, "can_mod_post": false, "send_replies": true, "parent_id": "t1_d2lnkwd", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Well as /u/elbiot said. All of your links end in the login page of bitbucket. Don't know about their policy, but if there is no way around it you definitely should so some more info on your changelog post. Noone is gonna sign up for something unknown.\nJust some feedback from someone who was actually interested ", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well as &lt;a href=\"/u/elbiot\"&gt;/u/elbiot&lt;/a&gt; said. All of your links end in the login page of bitbucket. Don&amp;#39;t know about their policy, but if there is no way around it you definitely should so some more info on your changelog post. Noone is gonna sign up for something unknown.\nJust some feedback from someone who was actually interested &lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_4ghlf7", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/4ghlf7/how_to_approximate_namedentity_recognition/d2w6lo9/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/4ghlf7/how_to_approximate_namedentity_recognition/", "name": "t1_d2w6lo9", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1462610546.0, "created_utc": 1462610546.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "http://www.prolificprogrammer.com/2016/04/how-to-approximate-named-entity.html"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Real Time Audio Processing", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "Shittenden", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "d1kaayb", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 10, "can_mod_post": false, "send_replies": true, "parent_id": "t3_4cmep6", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "I can only recommend pyo. ", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I can only recommend pyo. &lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_4cmep6", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/4cmep6/real_time_audio_processing/d1kaayb/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/4cmep6/real_time_audio_processing/", "name": "t1_d1kaayb", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1459423445.0, "created_utc": 1459423445.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/4cmep6/real_time_audio_processing/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Is there a way to switch audio devices with a simple script?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "rainingapricot", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "cw0hmw4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 2, "can_mod_post": false, "send_replies": true, "parent_id": "t3_3ot0cs", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Not really sure what your question is. \n\nIf you want to set the audio device of another program by running a little python script, I think you are out of luck. It would mean digging into the OS audio systems (CoreAudio, ALSA, JACK, ...). Not something you wanna do.\n\nMore likely you have a program inside which you wanna change/set the input/output device. So you are already using some library to talk to the audio device (pygame, pyaudio, pyo, ...).\n\nIIRC pygame to this day has no option for that and uses the default audio device. You could set this in your OS configuration before if you don't need a dynamic solution.\n\nOtherwise you are better of with more sophisticated libraries like pyaudio or pyo which have functions for getting available devices and setting them for input and output. ", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Not really sure what your question is. &lt;/p&gt;\n\n&lt;p&gt;If you want to set the audio device of another program by running a little python script, I think you are out of luck. It would mean digging into the OS audio systems (CoreAudio, ALSA, JACK, ...). Not something you wanna do.&lt;/p&gt;\n\n&lt;p&gt;More likely you have a program inside which you wanna change/set the input/output device. So you are already using some library to talk to the audio device (pygame, pyaudio, pyo, ...).&lt;/p&gt;\n\n&lt;p&gt;IIRC pygame to this day has no option for that and uses the default audio device. You could set this in your OS configuration before if you don&amp;#39;t need a dynamic solution.&lt;/p&gt;\n\n&lt;p&gt;Otherwise you are better of with more sophisticated libraries like pyaudio or pyo which have functions for getting available devices and setting them for input and output. &lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_3ot0cs", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/3ot0cs/is_there_a_way_to_switch_audio_devices_with_a/cw0hmw4/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/3ot0cs/is_there_a_way_to_switch_audio_devices_with_a/", "name": "t1_cw0hmw4", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1444904946.0, "created_utc": 1444904946.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/3ot0cs/is_there_a_way_to_switch_audio_devices_with_a/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Generating sound live", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "HeWhoTremblesAsIfMad", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "cvz9w0s", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 2, "can_mod_post": false, "send_replies": true, "parent_id": "t3_3oe0qh", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Easiest way would be [pyo](http://ajaxsoundstudio.com/software/pyo/) I guess. \n\nedit: formatting", "edited": 1444831942.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Easiest way would be &lt;a href=\"http://ajaxsoundstudio.com/software/pyo/\"&gt;pyo&lt;/a&gt; I guess. &lt;/p&gt;\n\n&lt;p&gt;edit: formatting&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_3oe0qh", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/3oe0qh/generating_sound_live/cvz9w0s/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/3oe0qh/generating_sound_live/", "name": "t1_cvz9w0s", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1444821755.0, "created_utc": 1444821755.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/3oe0qh/generating_sound_live/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Possible To Make A Guitar Effects Processor/Pedal With Python?", "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "JackBullenskie", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "cv24k99", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 12, "can_mod_post": false, "send_replies": true, "parent_id": "t1_cv1e22a", "score": 3, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "*pyo* is the way to go as it hooks you into the existing OS audio frameworks (jack, core audio, ...). \nAlso its core objects are written in C. You cannot beat that unless you write them on your own.\n\nConcerning the *raspberry*. You'll want to get a USB audio interface as the ADC/DAC are pretty cheap.\nFor that try to get the Raspberry 2. IIRC the first versions have problems with there duplex usb support, so that non or only a few interfaces actually work with recording and playing back at the same time.\nAlso tunning your JACK will be important.\n\n**edit:** just looked into your linked guide which seems to be quite what I wanted to say ;)", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;pyo&lt;/em&gt; is the way to go as it hooks you into the existing OS audio frameworks (jack, core audio, ...). \nAlso its core objects are written in C. You cannot beat that unless you write them on your own.&lt;/p&gt;\n\n&lt;p&gt;Concerning the &lt;em&gt;raspberry&lt;/em&gt;. You&amp;#39;ll want to get a USB audio interface as the ADC/DAC are pretty cheap.\nFor that try to get the Raspberry 2. IIRC the first versions have problems with there duplex usb support, so that non or only a few interfaces actually work with recording and playing back at the same time.\nAlso tunning your JACK will be important.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;edit:&lt;/strong&gt; just looked into your linked guide which seems to be quite what I wanted to say ;)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_3kxnbv", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/3kxnbv/possible_to_make_a_guitar_effects_processorpedal/cv24k99/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/3kxnbv/possible_to_make_a_guitar_effects_processorpedal/", "name": "t1_cv24k99", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1442302532.0, "created_utc": 1442302532.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/3kxnbv/possible_to_make_a_guitar_effects_processorpedal/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Understanding 'self'", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ctyzedm", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 8, "can_mod_post": false, "send_replies": true, "parent_id": "t3_3ggy3q", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Maybe it helps to see it how its implemented. A class and its method are actually not much more than \n\n* a data object which just holds the state (aka the variables) more like a struct\n* functions that take such a data object and work on them\n\nwhich is easily implemented. Think of \n\n    class MyClass:\n        state = True\n    \n        def reset_state(self):\n            self.state = False\n\nThis is could be understood as\n\n    class MyClass:\n        state = True\n    \n    def reset_state(myClass_object):\n        myClass_object.state = False\n\nMind the indent! Calling the \"method\" is easy as this:\n\n    m = myClass()\n    reset_state(m)\n    m.state\n    &gt;&gt;&gt; False\n\nWith the class notation and the indenting of the functions under it to become methods, you get a nicer way of calling the function/method. Which is totally equivalent.\n\n    m = myClass()\n    m.reset_state()\n    m.state\n    &gt;&gt;&gt; False\n\nAlso the *self* is just a convention. You could totally go from\n\n    class MyClass:\n        state = True\n    \n    def reset_state(myClass_object):\n        myClass_object.state = False\n\nto a class'ed version of it\n\n    class MyClass:\n        state = True\n    \n        def reset_state(myClass_object):\n            myClass_object.state = False\n\nMind the *myClass_object* instead of *self*! \n\nBy the way this is pretty much like *go* (golang) does its OO.\n\n**UPDATE**\n\nTo make my point a bit more clearer. \n\n    m = myClass()\n    m.reset_state()\n\nis the same as this\n\n    m = myClass()\n    MyClass.reset_state(m)\n\nYou can think of the methods of an object are functions under the namespace of the class.", "edited": 1439286084.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe it helps to see it how its implemented. A class and its method are actually not much more than &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;a data object which just holds the state (aka the variables) more like a struct&lt;/li&gt;\n&lt;li&gt;functions that take such a data object and work on them&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;which is easily implemented. Think of &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class MyClass:\n    state = True\n\n    def reset_state(self):\n        self.state = False\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is could be understood as&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class MyClass:\n    state = True\n\ndef reset_state(myClass_object):\n    myClass_object.state = False\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Mind the indent! Calling the &amp;quot;method&amp;quot; is easy as this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;m = myClass()\nreset_state(m)\nm.state\n&amp;gt;&amp;gt;&amp;gt; False\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With the class notation and the indenting of the functions under it to become methods, you get a nicer way of calling the function/method. Which is totally equivalent.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;m = myClass()\nm.reset_state()\nm.state\n&amp;gt;&amp;gt;&amp;gt; False\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Also the &lt;em&gt;self&lt;/em&gt; is just a convention. You could totally go from&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class MyClass:\n    state = True\n\ndef reset_state(myClass_object):\n    myClass_object.state = False\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to a class&amp;#39;ed version of it&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class MyClass:\n    state = True\n\n    def reset_state(myClass_object):\n        myClass_object.state = False\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Mind the &lt;em&gt;myClass_object&lt;/em&gt; instead of &lt;em&gt;self&lt;/em&gt;! &lt;/p&gt;\n\n&lt;p&gt;By the way this is pretty much like &lt;em&gt;go&lt;/em&gt; (golang) does its OO.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;To make my point a bit more clearer. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;m = myClass()\nm.reset_state()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is the same as this&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;m = myClass()\nMyClass.reset_state(m)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;You can think of the methods of an object are functions under the namespace of the class.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_3ggy3q", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/3ggy3q/understanding_self/ctyzedm/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/3ggy3q/understanding_self/", "name": "t1_ctyzedm", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1439285784.0, "created_utc": 1439285784.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/3ggy3q/understanding_self/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Interactive testing vs TDD", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "pvkooten", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "csggww7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 7, "can_mod_post": false, "send_replies": true, "parent_id": "t3_3avakp", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Cannot upvote /u/TomBombadildozer enough! Also don't underestimate how writing testable code ~~can~~ will improve your code quality (especially modularity/coupling). \n\nAs for the start: \"spiking\" (I think thats the TDD term) interactivly to get a first idea of the problem and solution is not forbidden. But having even just a few **easy to run** testing routines will make your life so much easier. Bringing up the REPL and typing the same 10 commands is not easy because you will not do this before every commit (I've been there). \n\nThe same for bugfixes. Ever have done the same ugly bug years after because you forgot that little detail? Write a specific test and it will be saved.\n\nIf you start simple, you soon will get to the point where testing solutions like py.test/tox and TDD will be something you want to use/do. \n\nAs for the changing tests. I don't really understand what's the big fuzz about changing your tests to fit to your changed design. Maybe it's because for me tests are much more than just a \"contract\". They show me where there are problems in my design and therefore eventually will someday. And its satisfying to see the 30 lines with several clauses shrink into 5 easy to understand lines.", "edited": 1435101619.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Cannot upvote &lt;a href=\"/u/TomBombadildozer\"&gt;/u/TomBombadildozer&lt;/a&gt; enough! Also don&amp;#39;t underestimate how writing testable code &lt;del&gt;can&lt;/del&gt; will improve your code quality (especially modularity/coupling). &lt;/p&gt;\n\n&lt;p&gt;As for the start: &amp;quot;spiking&amp;quot; (I think thats the TDD term) interactivly to get a first idea of the problem and solution is not forbidden. But having even just a few &lt;strong&gt;easy to run&lt;/strong&gt; testing routines will make your life so much easier. Bringing up the REPL and typing the same 10 commands is not easy because you will not do this before every commit (I&amp;#39;ve been there). &lt;/p&gt;\n\n&lt;p&gt;The same for bugfixes. Ever have done the same ugly bug years after because you forgot that little detail? Write a specific test and it will be saved.&lt;/p&gt;\n\n&lt;p&gt;If you start simple, you soon will get to the point where testing solutions like py.test/tox and TDD will be something you want to use/do. &lt;/p&gt;\n\n&lt;p&gt;As for the changing tests. I don&amp;#39;t really understand what&amp;#39;s the big fuzz about changing your tests to fit to your changed design. Maybe it&amp;#39;s because for me tests are much more than just a &amp;quot;contract&amp;quot;. They show me where there are problems in my design and therefore eventually will someday. And its satisfying to see the 30 lines with several clauses shrink into 5 easy to understand lines.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_3avakp", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/3avakp/interactive_testing_vs_tdd/csggww7/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/3avakp/interactive_testing_vs_tdd/", "name": "t1_csggww7", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1435101390.0, "created_utc": 1435101390.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/3avakp/interactive_testing_vs_tdd/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "PiScope: Turn your Raspberry Pi into an Oscilloscope/XY Plotter", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "yasoob_python", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "csfoiui", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 3, "can_mod_post": false, "send_replies": true, "parent_id": "t1_csf8cp1", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Exactly my question. \n\nFrom the ADC datasheet\n\n&gt; DATA RATE: 128SPS to 3.3kSPS ", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Exactly my question. &lt;/p&gt;\n\n&lt;p&gt;From the ADC datasheet&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;DATA RATE: 128SPS to 3.3kSPS &lt;/p&gt;\n&lt;/blockquote&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_3apkvp", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/3apkvp/piscope_turn_your_raspberry_pi_into_an/csfoiui/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/3apkvp/piscope_turn_your_raspberry_pi_into_an/", "name": "t1_csfoiui", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1435043871.0, "created_utc": 1435043871.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://github.com/ankitaggarwal011/PiScope"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Music/sound analysis: your ideas on useful Python modules and math concepts for this?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "cric0te", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 4, "can_mod_post": false, "send_replies": true, "parent_id": "t3_36uzjv", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Do you have experience with pitch tracking? I found these papers helpful\n\n&gt;T. Tolonen and M. Karjalainen, \u201cA computationally efficient\n&gt;multipitch analysis model,\u201d IEEE Transactions on Speech\n&gt;and Audio Processing, vol. 8, no. 6, pp. 708\u2013716, 2000.\n\nand \n\n&gt;Gareth Middleton, \u201cPitch detection algorithms,\u201d 2003.\n\nActually its not a trivial task even for monophonic signals. You can get good results with simples approaches like ACF but it all depends on the piece, instrument and whatever. So making it robust and work over a range of pieces is the hard part.\n\nAs for modules their is also [librosa](http://pythonhosted.org/librosa/index.html). Have never tried it but the tutorial looks promising.\n\nAnother option would be synchronizing your signal with a known score (e.g. [this](https://www.youtube.com/watch?v=PF05xP1NqUM) using chroma features).\n\n**edit:** module, typos", "edited": 1432378012.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Do you have experience with pitch tracking? I found these papers helpful&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;T. Tolonen and M. Karjalainen, \u201cA computationally efficient\nmultipitch analysis model,\u201d IEEE Transactions on Speech\nand Audio Processing, vol. 8, no. 6, pp. 708\u2013716, 2000.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Gareth Middleton, \u201cPitch detection algorithms,\u201d 2003.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Actually its not a trivial task even for monophonic signals. You can get good results with simples approaches like ACF but it all depends on the piece, instrument and whatever. So making it robust and work over a range of pieces is the hard part.&lt;/p&gt;\n\n&lt;p&gt;As for modules their is also &lt;a href=\"http://pythonhosted.org/librosa/index.html\"&gt;librosa&lt;/a&gt;. Have never tried it but the tutorial looks promising.&lt;/p&gt;\n\n&lt;p&gt;Another option would be synchronizing your signal with a known score (e.g. &lt;a href=\"https://www.youtube.com/watch?v=PF05xP1NqUM\"&gt;this&lt;/a&gt; using chroma features).&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;edit:&lt;/strong&gt; module, typos&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_36uzjv", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/36uzjv/musicsound_analysis_your_ideas_on_useful_python/cric0te/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/36uzjv/musicsound_analysis_your_ideas_on_useful_python/", "name": "t1_cric0te", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1432377801.0, "created_utc": 1432377801.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/36uzjv/musicsound_analysis_your_ideas_on_useful_python/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Collaborator wanted - for generative, online music composition.", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "theACEinpeACE", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "cpxntfr", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 5, "can_mod_post": false, "send_replies": true, "parent_id": "t3_2zw9kh", "score": 1, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "This is great. Like the idea of \"generative orchestra\" and electronic accompaniment. Also that it's recorded here in Berlin. \nNever worked with ChucK, but pyo and pure data.\npm me if you like.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;This is great. Like the idea of &amp;quot;generative orchestra&amp;quot; and electronic accompaniment. Also that it&amp;#39;s recorded here in Berlin. \nNever worked with ChucK, but pyo and pure data.\npm me if you like.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_2zw9kh", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/2zw9kh/collaborator_wanted_for_generative_online_music/cpxntfr/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/2zw9kh/collaborator_wanted_for_generative_online_music/", "name": "t1_cpxntfr", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1427880621.0, "created_utc": 1427880621.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/2zw9kh/collaborator_wanted_for_generative_online_music/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Python Singleton pattern - generic approach", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "haizaar", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "cob5tls", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": true, "author": "wolanko", "num_comments": 7, "can_mod_post": false, "send_replies": true, "parent_id": "t1_co8p6z0", "score": 2, "author_fullname": "t2_908qy", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "+1 on dependency injection\n\nI would even go further and dismiss such container libraries. Every time I was at a point to write such a container, it was actually the code that could be improved by making it more modular or splitting procedural (the setup) and functional parts. ", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;+1 on dependency injection&lt;/p&gt;\n\n&lt;p&gt;I would even go further and dismiss such container libraries. Every time I was at a point to write such a container, it was actually the code that could be improved by making it more modular or splitting procedural (the setup) and functional parts. &lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_2uiedz", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/2uiedz/python_singleton_pattern_generic_approach/cob5tls/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/2uiedz/python_singleton_pattern_generic_approach/", "name": "t1_cob5tls", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1423076855.0, "created_utc": 1423076855.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "http://tech.zarmory.com/2015/02/python-singleton-pattern-generic.html"}}], "before": null}}