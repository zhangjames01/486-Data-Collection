{"kind": "Listing", "data": {"after": "t1_ja48aav", "dist": 25, "modhash": null, "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2fwo", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Twitter will open source all code used to recommend tweets on March 31, says Elon Musk", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "programming", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jcw55p1", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 708, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jcsnrso", "score": 1, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "&gt;a known algorithm bot-farm and social media companies will better know how to game the system for exposure\n\nThat's tactic A.\n\nTactic B is for bot-farm owners to submit \"bug fixes\" to the open source code that game it in their favor.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;a known algorithm bot-farm and social media companies will better know how to game the system for exposure&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That&amp;#39;s tactic A.&lt;/p&gt;\n\n&lt;p&gt;Tactic B is for bot-farm owners to submit &amp;quot;bug fixes&amp;quot; to the open source code that game it in their favor.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11v4n5m", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/programming/comments/11v4n5m/twitter_will_open_source_all_code_used_to/jcw55p1/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/programming/comments/11v4n5m/twitter_will_open_source_all_code_used_to/", "name": "t1_jcw55p1", "author_flair_template_id": null, "subreddit_name_prefixed": "r/programming", "author_flair_text": null, "treatment_tags": [], "created": 1679272819.0, "created_utc": 1679272819.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://journal.media/twitter-will-open-source-all-code-used-to-recommend-tweets-on-march-31-says-elon-musk"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2rnve", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Amazon shipped me the wrong monitor and told me to reach out to Gigabyte for a replacement", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "buildapc", "link_author": "Cinco_Swim_", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jcw4dht", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 134, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jcva5tz", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Assuming it's P vs X, P is newer but 170Hz and X is 240Hz. Otherwise similar in terms of inputs, resolution, and features.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Assuming it&amp;#39;s P vs X, P is newer but 170Hz and X is 240Hz. Otherwise similar in terms of inputs, resolution, and features.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11vx1gc", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/buildapc/comments/11vx1gc/amazon_shipped_me_the_wrong_monitor_and_told_me/jcw4dht/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/buildapc/comments/11vx1gc/amazon_shipped_me_the_wrong_monitor_and_told_me/", "name": "t1_jcw4dht", "author_flair_template_id": null, "subreddit_name_prefixed": "r/buildapc", "author_flair_text": null, "treatment_tags": [], "created": 1679272460.0, "created_utc": 1679272460.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/buildapc/comments/11vx1gc/amazon_shipped_me_the_wrong_monitor_and_told_me/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qstm", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "How do I remove my mother from a joint account?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "personalfinance", "link_author": "SrryMello", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jcus6ff", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 509, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jctvrkv", "score": 1, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "&gt; I don't think you can close a joint account by yourself \n\nNot saying you can close any joint account by yourself, but I certainly have closed a joint account by myself.\n\nExactly what is suggested here - new account, transfer the money, then you close an empty account.\n\nBy the way, some banks will alert the joint owner that a large withdrawal was made.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": "", "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I don&amp;#39;t think you can close a joint account by yourself &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Not saying you can close any joint account by yourself, but I certainly have closed a joint account by myself.&lt;/p&gt;\n\n&lt;p&gt;Exactly what is suggested here - new account, transfer the money, then you close an empty account.&lt;/p&gt;\n\n&lt;p&gt;By the way, some banks will alert the joint owner that a large withdrawal was made.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11v6lc4", "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden": false, "permalink": "/r/personalfinance/comments/11v6lc4/how_do_i_remove_my_mother_from_a_joint_account/jcus6ff/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/personalfinance/comments/11v6lc4/how_do_i_remove_my_mother_from_a_joint_account/", "name": "t1_jcus6ff", "author_flair_template_id": null, "subreddit_name_prefixed": "r/personalfinance", "author_flair_text": "\u200b", "treatment_tags": [], "created": 1679251629.0, "created_utc": 1679251629.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": "", "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/personalfinance/comments/11v6lc4/how_do_i_remove_my_mother_from_a_joint_account/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Is there any reason to explicitly declare and implement destructors?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "0Il0I0l0", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jcuqrmn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 36, "can_mod_post": false, "send_replies": true, "parent_id": "t3_11vo9og", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "The most common reason to implement a destructor is because you have data members which have only been forward declared.\n\nFoo.h:\n\n    class Bar;\n    class Foo {\n        std::unique_ptr&lt;Bar&gt; m_bar;\n    public:\n        ~Bar();\n    };\n\nIf we let the compiler generate the destructor it will complain `Bar::~Bar()` is not defined while generating `Foo::~Foo()`. So we forward declare it and then later implement it:\n\nFoo.cpp:\n\n    #include \"Foo.h\"\n    #include \"Bar.h\"\n\n    Foo::~Foo() = default; // et voila\n\nThe alternative is this:\n\nFoo.h:\n\n    #include \"Bar.h\"\n    class Foo {\n        std::unique_ptr&lt;Bar&gt; m_bar;\n    };\n\nNote the inclusion of `Bar.h`. That may not be what you want, but to avoid it you need to define the destructor in a separate translation unit.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The most common reason to implement a destructor is because you have data members which have only been forward declared.&lt;/p&gt;\n\n&lt;p&gt;Foo.h:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Bar;\nclass Foo {\n    std::unique_ptr&amp;lt;Bar&amp;gt; m_bar;\npublic:\n    ~Bar();\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If we let the compiler generate the destructor it will complain &lt;code&gt;Bar::~Bar()&lt;/code&gt; is not defined while generating &lt;code&gt;Foo::~Foo()&lt;/code&gt;. So we forward declare it and then later implement it:&lt;/p&gt;\n\n&lt;p&gt;Foo.cpp:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;quot;Foo.h&amp;quot;\n#include &amp;quot;Bar.h&amp;quot;\n\nFoo::~Foo() = default; // et voila\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The alternative is this:&lt;/p&gt;\n\n&lt;p&gt;Foo.h:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;quot;Bar.h&amp;quot;\nclass Foo {\n    std::unique_ptr&amp;lt;Bar&amp;gt; m_bar;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note the inclusion of &lt;code&gt;Bar.h&lt;/code&gt;. That may not be what you want, but to avoid it you need to define the destructor in a separate translation unit.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11vo9og", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11vo9og/is_there_any_reason_to_explicitly_declare_and/jcuqrmn/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11vo9og/is_there_any_reason_to_explicitly_declare_and/", "name": "t1_jcuqrmn", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1679251075.0, "created_utc": 1679251075.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11vo9og/is_there_any_reason_to_explicitly_declare_and/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Is there any reason to explicitly declare and implement destructors?", "mod_reason_by": null, "banned_by": null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "0Il0I0l0", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jcuq3gy", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "tangerinelion", "num_comments": 36, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jcukzwe", "score": 6, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "I mean... the compiler clearly lets you do that. It may make sense in very limited circumstances, but almost every case where you actually would want this you'd also immediately want a placement new.\n\n    foos.~vector();\n    new (&amp;foos) vector();\n\nwould be fine. But pointless from the destructor as the destructor will implicitly call the destructor for every member variable when reaching `}`, thus achieving\n\n    foos.~vector();\n    new (&amp;foos) vector();\n    foos.~vector();\n\nwhere we can recognize the last two operations as a combined no-op. But the only way to avoid that is to remove the initial `foos.~vector();`.\n\nThe most common \"need\" for this sort of thing is when working with a `union`. Which you should never do in C++17 as we have `std::variant` that achieves the same thing but is actually safe to use rather than incredibly error-prone.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I mean... the compiler clearly lets you do that. It may make sense in very limited circumstances, but almost every case where you actually would want this you&amp;#39;d also immediately want a placement new.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;foos.~vector();\nnew (&amp;amp;foos) vector();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;would be fine. But pointless from the destructor as the destructor will implicitly call the destructor for every member variable when reaching &lt;code&gt;}&lt;/code&gt;, thus achieving&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;foos.~vector();\nnew (&amp;amp;foos) vector();\nfoos.~vector();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;where we can recognize the last two operations as a combined no-op. But the only way to avoid that is to remove the initial &lt;code&gt;foos.~vector();&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The most common &amp;quot;need&amp;quot; for this sort of thing is when working with a &lt;code&gt;union&lt;/code&gt;. Which you should never do in C++17 as we have &lt;code&gt;std::variant&lt;/code&gt; that achieves the same thing but is actually safe to use rather than incredibly error-prone.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11vo9og", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11vo9og/is_there_any_reason_to_explicitly_declare_and/jcuq3gy/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11vo9og/is_there_any_reason_to_explicitly_declare_and/", "name": "t1_jcuq3gy", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1679250815.0, "created_utc": 1679250815.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11vo9og/is_there_any_reason_to_explicitly_declare_and/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qstm", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Do I need to invest more for retirement than my Roth IRA?", "mod_reason_by": null, "banned_by": null, "ups": -5, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "personalfinance", "link_author": "Opie30-30", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jcqh9c3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 144, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jcpzabw", "score": -5, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Has been. There is ample evidence that is no longer the case going forward.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": "", "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Has been. There is ample evidence that is no longer the case going forward.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11ukry4", "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden": false, "permalink": "/r/personalfinance/comments/11ukry4/do_i_need_to_invest_more_for_retirement_than_my/jcqh9c3/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/personalfinance/comments/11ukry4/do_i_need_to_invest_more_for_retirement_than_my/", "name": "t1_jcqh9c3", "author_flair_template_id": null, "subreddit_name_prefixed": "r/personalfinance", "author_flair_text": "\u200b", "treatment_tags": [], "created": 1679168607.0, "created_utc": 1679168607.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": "", "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/personalfinance/comments/11ukry4/do_i_need_to_invest_more_for_retirement_than_my/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2cneq", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Ron DeSantis suffers blow as court rejects \"dystopian\" anti-woke law", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "politics", "link_author": "Travismatthew08", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jcmsv2v", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 2228, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jclphf4", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Nobody can confirm the working title for his book wasn't \"My Struggle for Freedom\"", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Nobody can confirm the working title for his book wasn&amp;#39;t &amp;quot;My Struggle for Freedom&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11twnas", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/politics/comments/11twnas/ron_desantis_suffers_blow_as_court_rejects/jcmsv2v/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/politics/comments/11twnas/ron_desantis_suffers_blow_as_court_rejects/", "name": "t1_jcmsv2v", "author_flair_template_id": null, "subreddit_name_prefixed": "r/politics", "author_flair_text": null, "treatment_tags": [], "created": 1679096234.0, "created_utc": 1679096234.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.newsweek.com/ron-desantis-suffers-blow-court-rejects-dystopian-stop-woke-act-injunction-1788438"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "int x = 10 Vs int x{10}", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "shubham-jr", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jcmknuy", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 31, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jcl7yfg", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "The problem I have is it's talking about primitives. I'm sorry but making up general rules based on the things that are least like every other type you'll actually work with isn't the way we should do things.\n\nYou even see this with class member initialization -- something like this\n\n    class Foo {\n        int m_x = 0;\n        std::string m_y;\n    // ...\n    };\n\nWe have to write something special and unique for the primitive `m_x` to be initialized correctly, but `m_y` just works because it's an actual reasonable type where the language makes actual guarantees about how it works.\n\nI'm on the complete other end of the spectrum: I've never found a good reason to write a POD or aggregate over a class with constructors. The multiple levels of braces are confusing and the special behavior that can happen when you leave one out or have different numbers of things in your initialization is really weird edge cases stuff we shouldn't have to ever think about. If I have a constructor that takes 3 arguments and you give me 2, it fails to compile rather than initializing the first 2 members and giving uninitialized garbage that's a read access error when someone later tries to read it.\n\nIIRC, Jason Turner's suggestion for copy constructor and any variable initialized by returning from a function is `=`.\n\n    Database myDB = initializeDB(dbConfig);\n\nSimple, straightforward, unambiguous. No extra level of parentheses, no confusion with initializer lists. Honestly, a majority of variables _should_ be initialized via function return, it's actually rather uncommon that a multi-argument constructor or POD needs to be configured and that's generally the one place that \"does the real work.\"", "edited": 1679093035.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The problem I have is it&amp;#39;s talking about primitives. I&amp;#39;m sorry but making up general rules based on the things that are least like every other type you&amp;#39;ll actually work with isn&amp;#39;t the way we should do things.&lt;/p&gt;\n\n&lt;p&gt;You even see this with class member initialization -- something like this&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Foo {\n    int m_x = 0;\n    std::string m_y;\n// ...\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;We have to write something special and unique for the primitive &lt;code&gt;m_x&lt;/code&gt; to be initialized correctly, but &lt;code&gt;m_y&lt;/code&gt; just works because it&amp;#39;s an actual reasonable type where the language makes actual guarantees about how it works.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m on the complete other end of the spectrum: I&amp;#39;ve never found a good reason to write a POD or aggregate over a class with constructors. The multiple levels of braces are confusing and the special behavior that can happen when you leave one out or have different numbers of things in your initialization is really weird edge cases stuff we shouldn&amp;#39;t have to ever think about. If I have a constructor that takes 3 arguments and you give me 2, it fails to compile rather than initializing the first 2 members and giving uninitialized garbage that&amp;#39;s a read access error when someone later tries to read it.&lt;/p&gt;\n\n&lt;p&gt;IIRC, Jason Turner&amp;#39;s suggestion for copy constructor and any variable initialized by returning from a function is &lt;code&gt;=&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Database myDB = initializeDB(dbConfig);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Simple, straightforward, unambiguous. No extra level of parentheses, no confusion with initializer lists. Honestly, a majority of variables &lt;em&gt;should&lt;/em&gt; be initialized via function return, it&amp;#39;s actually rather uncommon that a multi-argument constructor or POD needs to be configured and that&amp;#39;s generally the one place that &amp;quot;does the real work.&amp;quot;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11tv464", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11tv464/int_x_10_vs_int_x10/jcmknuy/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11tv464/int_x_10_vs_int_x10/", "name": "t1_jcmknuy", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1679092666.0, "created_utc": 1679092666.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11tv464/int_x_10_vs_int_x10/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Handling exceptions inside for loop", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "TryToHelpPeople", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jcdhprz", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 13, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jcda9eg", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "    try\n    {\n        for (...)\n        {\n             // Throws\n        }\n    }\n    catch (...)\n    {\n        // Oh no, how do I go back?\n    }\n\nbecomes\n\n    for (...)\n    {\n        try\n        {\n            // Throws\n        }\n        catch (...)\n        {\n            // LOL, imma ignore this:\n            continue;\n        }\n    }", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;try\n{\n    for (...)\n    {\n         // Throws\n    }\n}\ncatch (...)\n{\n    // Oh no, how do I go back?\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;becomes&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for (...)\n{\n    try\n    {\n        // Throws\n    }\n    catch (...)\n    {\n        // LOL, imma ignore this:\n        continue;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11sbuom", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11sbuom/handling_exceptions_inside_for_loop/jcdhprz/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11sbuom/handling_exceptions_inside_for_loop/", "name": "t1_jcdhprz", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1678929258.0, "created_utc": 1678929258.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11sbuom/handling_exceptions_inside_for_loop/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Is there a 2d Array?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "Mangos_exist", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jc4haj7", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 9, "can_mod_post": false, "send_replies": true, "parent_id": "t3_11qlyzb", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "If your definition of 2D array is something you can apply `operator[]` to twice then yes it is.\n\nIn the case of `std::string`, you can think of that as `std::vector&lt;char&gt;`. It becomes a matter of opinion whether a C array of `std::vector&lt;char&gt;` would be considered a 2D array of characters -- there are good reasons to agree and disagree with that notion.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;If your definition of 2D array is something you can apply &lt;code&gt;operator[]&lt;/code&gt; to twice then yes it is.&lt;/p&gt;\n\n&lt;p&gt;In the case of &lt;code&gt;std::string&lt;/code&gt;, you can think of that as &lt;code&gt;std::vector&amp;lt;char&amp;gt;&lt;/code&gt;. It becomes a matter of opinion whether a C array of &lt;code&gt;std::vector&amp;lt;char&amp;gt;&lt;/code&gt; would be considered a 2D array of characters -- there are good reasons to agree and disagree with that notion.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11qlyzb", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11qlyzb/is_there_a_2d_array/jc4haj7/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11qlyzb/is_there_a_2d_array/", "name": "t1_jc4haj7", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1678750954.0, "created_utc": 1678750954.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11qlyzb/is_there_a_2d_array/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Partial Classes (C++ 26) and Inheritance", "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "hungry_squared_hippo", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jc4egcu", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 20, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jc3zyc4", "score": 3, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "It is not provably true that you are using virtual functions in this case as `auto` here deduces to the concrete type and the compiler can de-virtualize the calls.\n\nIn order to guarantee you hit the virtual table you need to use a polymorphic handle to invoke the function. Commonly that's done via pointer but you can also use references, which is essentially just an alias to another object, much like how a pointer just refers to another object (or null).", "edited": 1678749912.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;It is not provably true that you are using virtual functions in this case as &lt;code&gt;auto&lt;/code&gt; here deduces to the concrete type and the compiler can de-virtualize the calls.&lt;/p&gt;\n\n&lt;p&gt;In order to guarantee you hit the virtual table you need to use a polymorphic handle to invoke the function. Commonly that&amp;#39;s done via pointer but you can also use references, which is essentially just an alias to another object, much like how a pointer just refers to another object (or null).&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11q9ura", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11q9ura/partial_classes_c_26_and_inheritance/jc4egcu/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11q9ura/partial_classes_c_26_and_inheritance/", "name": "t1_jc4egcu", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1678749728.0, "created_utc": 1678749728.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11q9ura/partial_classes_c_26_and_inheritance/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What is more readable for people and more Pythonic", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "thedhinchak", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jc4cbl6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 48, "can_mod_post": false, "send_replies": true, "parent_id": "t3_11qcp01", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Option 1 is close, the default constructed listed that gets appended one-by-one is an anti-pattern when we have comprehensions. That predicate is a bit gnarly, though, so we could extract that out like this:\n\n    def accept(something):\n        return something.some_var.startswith(\"Hello There\") and something.name in [\"blah\", \"bleh\", \"blue\"]\n    return sorted(something.name for something in lot_of_somethings if accept(something))\n\nThough if we're going to use `sorted` on a generator like that we could also use a couple other built-ins:\n\n    return sorted(map(lambda s: s.name, filter(accept, lot_of_somethings)))", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Option 1 is close, the default constructed listed that gets appended one-by-one is an anti-pattern when we have comprehensions. That predicate is a bit gnarly, though, so we could extract that out like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def accept(something):\n    return something.some_var.startswith(&amp;quot;Hello There&amp;quot;) and something.name in [&amp;quot;blah&amp;quot;, &amp;quot;bleh&amp;quot;, &amp;quot;blue&amp;quot;]\nreturn sorted(something.name for something in lot_of_somethings if accept(something))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Though if we&amp;#39;re going to use &lt;code&gt;sorted&lt;/code&gt; on a generator like that we could also use a couple other built-ins:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;return sorted(map(lambda s: s.name, filter(accept, lot_of_somethings)))\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11qcp01", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/11qcp01/what_is_more_readable_for_people_and_more_pythonic/jc4cbl6/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/11qcp01/what_is_more_readable_for_people_and_more_pythonic/", "name": "t1_jc4cbl6", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1678748818.0, "created_utc": 1678748818.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/11qcp01/what_is_more_readable_for_people_and_more_pythonic/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0y", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What is more readable for people and more Pythonic", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "Python", "link_author": "thedhinchak", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jc4b4wg", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 48, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jc3i61c", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "I believe you're missing the factory builder.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I believe you&amp;#39;re missing the factory builder.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11qcp01", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/Python/comments/11qcp01/what_is_more_readable_for_people_and_more_pythonic/jc4b4wg/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/Python/comments/11qcp01/what_is_more_readable_for_people_and_more_pythonic/", "name": "t1_jc4b4wg", "author_flair_template_id": null, "subreddit_name_prefixed": "r/Python", "author_flair_text": null, "treatment_tags": [], "created": 1678748311.0, "created_utc": 1678748311.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/Python/comments/11qcp01/what_is_more_readable_for_people_and_more_pythonic/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh3r", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "NWS first call snowfall forecast for Monday-Tuesday storm", "mod_reason_by": null, "banned_by": null, "ups": 38, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "boston", "link_author": "ndiorio13", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jc01ojy", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "tangerinelion", "num_comments": 85, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jbz9xez", "score": 38, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Everyone there knew what they were getting into.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Everyone there knew what they were getting into.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11pqalz", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/boston/comments/11pqalz/nws_first_call_snowfall_forecast_for/jc01ojy/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/boston/comments/11pqalz/nws_first_call_snowfall_forecast_for/", "name": "t1_jc01ojy", "author_flair_template_id": null, "subreddit_name_prefixed": "r/boston", "author_flair_text": null, "treatment_tags": [], "created": 1678669980.0, "created_utc": 1678669980.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://i.redd.it/cp5j79yq2fna1.jpg"}}, {"kind": "t1", "data": {"subreddit_id": "t5_36gtu", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Early call Snowfall Forecasts for Tuesday(ish) storm! A lot to still work out in the next few days.", "mod_reason_by": null, "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "BostonWeather", "link_author": "RyanKinder", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jby54zw", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "tangerinelion", "num_comments": 45, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jbxa2cy", "score": 4, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Probabilistic forecast here is 10% chance of nothing, 10% chance of 14\"+ and expected about 6\".\n\nFeels like companies following the letter of the law providing an estimated salary range for a job as being $0 - $2 million/yr.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Probabilistic forecast here is 10% chance of nothing, 10% chance of 14&amp;quot;+ and expected about 6&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;Feels like companies following the letter of the law providing an estimated salary range for a job as being $0 - $2 million/yr.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11ozfrv", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/BostonWeather/comments/11ozfrv/early_call_snowfall_forecasts_for_tuesdayish/jby54zw/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/BostonWeather/comments/11ozfrv/early_call_snowfall_forecasts_for_tuesdayish/", "name": "t1_jby54zw", "author_flair_template_id": null, "subreddit_name_prefixed": "r/BostonWeather", "author_flair_text": null, "treatment_tags": [], "created": 1678640553.0, "created_utc": 1678640553.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://i.redd.it/cvzcu8sa87na1.jpg"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2ubgg", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Got a parking ticket in Dallas. I went to go pay since I was guilty (didn\u2019t know city ordinance limited street parking to 24 hours)\u2026 office address was wrong, online payment system was down, their over-the-phone payment was also down. And when I got there, they won\u2019t accept cash or credit card.", "mod_reason_by": null, "banned_by": null, "ups": 76, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "mildlyinfuriating", "link_author": "coversbyrichard", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jbqtdag", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "tangerinelion", "num_comments": 4615, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jbqlw2h", "score": 76, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Hard cash? No way.\n\nPiece of paper you scribbled on? That's gold.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Hard cash? No way.&lt;/p&gt;\n\n&lt;p&gt;Piece of paper you scribbled on? That&amp;#39;s gold.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11o2k62", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/mildlyinfuriating/comments/11o2k62/got_a_parking_ticket_in_dallas_i_went_to_go_pay/jbqtdag/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/mildlyinfuriating/comments/11o2k62/got_a_parking_ticket_in_dallas_i_went_to_go_pay/", "name": "t1_jbqtdag", "author_flair_template_id": null, "subreddit_name_prefixed": "r/mildlyinfuriating", "author_flair_text": null, "treatment_tags": [], "created": 1678493512.0, "created_utc": 1678493512.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/gallery/11o2k62"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2s5oq", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "LPT: You can't lie about how much you make in interviews anymore", "mod_reason_by": null, "banned_by": null, "ups": 20, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "LifeProTips", "link_author": "KingOfTheP4s", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jbqsouq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "tangerinelion", "num_comments": 1096, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jbqrem0", "score": 20, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "A lot, as is tradition.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;A lot, as is tradition.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11o2o5i", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/LifeProTips/comments/11o2o5i/lpt_you_cant_lie_about_how_much_you_make_in/jbqsouq/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/LifeProTips/comments/11o2o5i/lpt_you_cant_lie_about_how_much_you_make_in/", "name": "t1_jbqsouq", "author_flair_template_id": null, "subreddit_name_prefixed": "r/LifeProTips", "author_flair_text": null, "treatment_tags": [], "created": 1678493202.0, "created_utc": 1678493202.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/LifeProTips/comments/11o2o5i/lpt_you_cant_lie_about_how_much_you_make_in/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What are some signs that code is written by an inexperienced developer?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "No-Quality5546", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jbqrf73", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 77, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jbpcyiq", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "The literals namespaces were created because the symbols defined in them are only usable when brought into global scope. It's a feature that they're in their own namespace.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The literals namespaces were created because the symbols defined in them are only usable when brought into global scope. It&amp;#39;s a feature that they&amp;#39;re in their own namespace.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11nomn3", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11nomn3/what_are_some_signs_that_code_is_written_by_an/jbqrf73/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11nomn3/what_are_some_signs_that_code_is_written_by_an/", "name": "t1_jbqrf73", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1678492624.0, "created_utc": 1678492624.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11nomn3/what_are_some_signs_that_code_is_written_by_an/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tjwt", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Mind you the speed limit is 30mph", "mod_reason_by": null, "banned_by": null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "carcrash", "link_author": "boatjuicecowboy", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jb3dfwg", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "tangerinelion", "num_comments": 40, "can_mod_post": false, "send_replies": true, "parent_id": "t3_11jjoie", "score": 6, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "The speed limit has nothing to do with the actual speed.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The speed limit has nothing to do with the actual speed.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11jjoie", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/carcrash/comments/11jjoie/mind_you_the_speed_limit_is_30mph/jb3dfwg/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/carcrash/comments/11jjoie/mind_you_the_speed_limit_is_30mph/", "name": "t1_jb3dfwg", "author_flair_template_id": null, "subreddit_name_prefixed": "r/carcrash", "author_flair_text": null, "treatment_tags": [], "created": 1678071792.0, "created_utc": 1678071792.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://i.redd.it/4a13p4tx62ma1.jpg"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tex6", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Who else?", "mod_reason_by": null, "banned_by": null, "ups": 5, "num_reports": null, "author_flair_type": "richtext", "total_awards_received": 0, "subreddit": "ProgrammerHumor", "link_author": "HalloIchBinRolli", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jb0pmv6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "tangerinelion", "num_comments": 333, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jb0jhye", "score": 5, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "No, no, `--x &amp; i++` is how you signal to the compiler you want to do two things.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [{"a": ":cp:", "e": "emoji", "u": "https://emoji.redditmedia.com/nd3ws7rqzg421_t5_2tex6/cp"}], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No, no, &lt;code&gt;--x &amp;amp; i++&lt;/code&gt; is how you signal to the compiler you want to do two things.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11iuz6o", "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden": false, "permalink": "/r/ProgrammerHumor/comments/11iuz6o/who_else/jb0pmv6/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammerHumor/comments/11iuz6o/who_else/", "name": "t1_jb0pmv6", "author_flair_template_id": "11a3bed0-008a-11e9-a9dc-0eb0a66eb948", "subreddit_name_prefixed": "r/ProgrammerHumor", "author_flair_text": ":cp:", "treatment_tags": [], "created": 1678030052.0, "created_utc": 1678030052.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": "transparent", "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://i.redd.it/59x2gn7s6yla1.jpg"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tex6", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Who else?", "mod_reason_by": null, "banned_by": null, "ups": 12, "num_reports": null, "author_flair_type": "richtext", "total_awards_received": 0, "subreddit": "ProgrammerHumor", "link_author": "HalloIchBinRolli", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jb0pisy", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "tangerinelion", "num_comments": 333, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jb0o5la", "score": 12, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "There's a lot we used to do in the 70s which isn't recommended anymore.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [{"a": ":cp:", "e": "emoji", "u": "https://emoji.redditmedia.com/nd3ws7rqzg421_t5_2tex6/cp"}], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There&amp;#39;s a lot we used to do in the 70s which isn&amp;#39;t recommended anymore.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11iuz6o", "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden": false, "permalink": "/r/ProgrammerHumor/comments/11iuz6o/who_else/jb0pisy/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammerHumor/comments/11iuz6o/who_else/", "name": "t1_jb0pisy", "author_flair_template_id": "11a3bed0-008a-11e9-a9dc-0eb0a66eb948", "subreddit_name_prefixed": "r/ProgrammerHumor", "author_flair_text": ":cp:", "treatment_tags": [], "created": 1678030002.0, "created_utc": 1678030002.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": "transparent", "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://i.redd.it/59x2gn7s6yla1.jpg"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "redefine member variables in derived class", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "HydrogenxPi", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ja4hopd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 7, "can_mod_post": false, "send_replies": true, "parent_id": "t1_ja2j6f0", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Listen to that engine purr.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Listen to that engine purr.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11c4fvw", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11c4fvw/redefine_member_variables_in_derived_class/ja4hopd/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11c4fvw/redefine_member_variables_in_derived_class/", "name": "t1_ja4hopd", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1677441325.0, "created_utc": 1677441325.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11c4fvw/redefine_member_variables_in_derived_class/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "How to avoid compiling whole C++ project every time using Github actions?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "Edwin_Wang1996", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ja4gq26", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 23, "can_mod_post": false, "send_replies": true, "parent_id": "t1_ja3gg34", "score": 2, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "As a senior dev on a large desktop project, incremental builds are never part of CI.\n\nThe thing we care about is \"Does the repository build and test successfully?\"\n\nIt shouldn't work only if you happen to have artifacts from an earlier build present.\n\nThe other way around is OK. If it breaks when you have older artifacts around that's easy to solve. `git clean -xfd` and retry.\n\nTo me it looks like OP has the correct behavior. Your project takes 20 minutes to compile, that's just what it takes to validate a build when you push a new change. For reference, our project takes about 60 minutes to compile on the CI machines we have or 30 minutes on a Threadripper Pro 3955WX.", "edited": 1677441237.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As a senior dev on a large desktop project, incremental builds are never part of CI.&lt;/p&gt;\n\n&lt;p&gt;The thing we care about is &amp;quot;Does the repository build and test successfully?&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;It shouldn&amp;#39;t work only if you happen to have artifacts from an earlier build present.&lt;/p&gt;\n\n&lt;p&gt;The other way around is OK. If it breaks when you have older artifacts around that&amp;#39;s easy to solve. &lt;code&gt;git clean -xfd&lt;/code&gt; and retry.&lt;/p&gt;\n\n&lt;p&gt;To me it looks like OP has the correct behavior. Your project takes 20 minutes to compile, that&amp;#39;s just what it takes to validate a build when you push a new change. For reference, our project takes about 60 minutes to compile on the CI machines we have or 30 minutes on a Threadripper Pro 3955WX.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11cd2y3", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11cd2y3/how_to_avoid_compiling_whole_c_project_every_time/ja4gq26/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11cd2y3/how_to_avoid_compiling_whole_c_project_every_time/", "name": "t1_ja4gq26", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1677440944.0, "created_utc": 1677440944.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11cd2y3/how_to_avoid_compiling_whole_c_project_every_time/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2ql97", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "How to get rid of curry smell from apartment?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "HomeImprovement", "link_author": "hispasia", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ja48u4v", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 417, "can_mod_post": false, "send_replies": true, "parent_id": "t1_ja2obo7", "score": 1, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Oven cleaner is lye. Which is exactly how you turn oil into soap.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Oven cleaner is lye. Which is exactly how you turn oil into soap.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11bx1uf", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/HomeImprovement/comments/11bx1uf/how_to_get_rid_of_curry_smell_from_apartment/ja48u4v/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/HomeImprovement/comments/11bx1uf/how_to_get_rid_of_curry_smell_from_apartment/", "name": "t1_ja48u4v", "author_flair_template_id": null, "subreddit_name_prefixed": "r/HomeImprovement", "author_flair_text": null, "treatment_tags": [], "created": 1677437801.0, "created_utc": 1677437801.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/HomeImprovement/comments/11bx1uf/how_to_get_rid_of_curry_smell_from_apartment/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2tdbd", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Std::string to c string", "mod_reason_by": null, "banned_by": null, "ups": 0, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "cpp_questions", "link_author": "Beautiful-Unable", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ja48aav", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "tangerinelion", "num_comments": 19, "can_mod_post": false, "send_replies": true, "parent_id": "t1_ja110vr", "score": 0, "author_fullname": "t2_9l50k", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "There are two methods which provide a pointer to the buffer from a std::string. One is c_str(), the other is data().\n\nIf the buffer held by the std::string is not null terminated, data() will return a non-null terminated string while c\\_str() guarantees a null terminating character.\n\nIn the case the buffer does not hold a null terminated string and you call c\\_str() it will be required to insert a null termination character, which could also require a reallocation of the buffer. That is to say given this:\n\n    const char* data = myString.data();\n    const char* cstr = myData.c_str();\n\nIt is a logical error to assert that `data == cstr`. If they were called in the reverse order, it is always true that `data == cstr`.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;There are two methods which provide a pointer to the buffer from a std::string. One is c_str(), the other is data().&lt;/p&gt;\n\n&lt;p&gt;If the buffer held by the std::string is not null terminated, data() will return a non-null terminated string while c_str() guarantees a null terminating character.&lt;/p&gt;\n\n&lt;p&gt;In the case the buffer does not hold a null terminated string and you call c_str() it will be required to insert a null termination character, which could also require a reallocation of the buffer. That is to say given this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const char* data = myString.data();\nconst char* cstr = myData.c_str();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is a logical error to assert that &lt;code&gt;data == cstr&lt;/code&gt;. If they were called in the reverse order, it is always true that &lt;code&gt;data == cstr&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11c0xsr", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/cpp_questions/comments/11c0xsr/stdstring_to_c_string/ja48aav/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/cpp_questions/comments/11c0xsr/stdstring_to_c_string/", "name": "t1_ja48aav", "author_flair_template_id": null, "subreddit_name_prefixed": "r/cpp_questions", "author_flair_text": null, "treatment_tags": [], "created": 1677437586.0, "created_utc": 1677437586.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/cpp_questions/comments/11c0xsr/stdstring_to_c_string/"}}], "before": null}}