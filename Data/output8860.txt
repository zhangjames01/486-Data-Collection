{"kind": "Listing", "data": {"after": "t1_irggosa", "dist": 25, "modhash": null, "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2s7lj", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "I ported Casey Muratori's C++ example of \"clean code\" to Rust, here what I found", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "rust", "link_author": "MrPalich", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "janis3o", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 161, "can_mod_post": false, "send_replies": true, "parent_id": "t1_jal1i0f", "score": 2, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Yeah it's so weird.  I mean, I largely agree with him on this, but usually people only block comments because they have been cancelled, or are religious nutjobs that cannot deal with \"feedback\".  It's not a good look.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yeah it&amp;#39;s so weird.  I mean, I largely agree with him on this, but usually people only block comments because they have been cancelled, or are religious nutjobs that cannot deal with &amp;quot;feedback&amp;quot;.  It&amp;#39;s not a good look.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11fkfib", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/rust/comments/11fkfib/i_ported_casey_muratoris_c_example_of_clean_code/janis3o/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/rust/comments/11fkfib/i_ported_casey_muratoris_c_example_of_clean_code/", "name": "t1_janis3o", "author_flair_template_id": null, "subreddit_name_prefixed": "r/rust", "author_flair_text": null, "treatment_tags": [], "created": 1677781698.0, "created_utc": 1677781698.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/rust/comments/11fkfib/i_ported_casey_muratoris_c_example_of_clean_code/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "GOTOphobia considered harmful (in C)", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "lingdocs", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "jaa4ipd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 15, "can_mod_post": false, "send_replies": true, "parent_id": "t1_ja9qelh", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "&gt; If you write a function that tests lots of conditions but needs to clean up when exiting, you can either do this with lots of identical code repeated all over the place or with nested if statements that get way too many levels of indentation \u2013 or you can have a clearly marked exit point and jump to it.\n\nThat is not the only way to deal with this issue.\n\nFor every nested resource, you can create a nested sub-function.  So each function allocates its own resource, then calls sub-functions for the other resources.  If your resource allocation or initialization fails then return with failure.  If the sub-function returns with a fail, then free your own resource and return fail.  No labels or gotos will be required.\n\n&gt; Also, gotos are really the most straightforward way to program finite state machines in C.\n\nActually a for(;;) switch (state) { ... } is the most straightforward way to do this.  However, the goto method is clearly much faster in C.  (Although perhaps, super-duper compilers like Clang might be able to transform the for switch() scheme into just a sequence of gotos.)", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;If you write a function that tests lots of conditions but needs to clean up when exiting, you can either do this with lots of identical code repeated all over the place or with nested if statements that get way too many levels of indentation \u2013 or you can have a clearly marked exit point and jump to it.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That is not the only way to deal with this issue.&lt;/p&gt;\n\n&lt;p&gt;For every nested resource, you can create a nested sub-function.  So each function allocates its own resource, then calls sub-functions for the other resources.  If your resource allocation or initialization fails then return with failure.  If the sub-function returns with a fail, then free your own resource and return fail.  No labels or gotos will be required.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Also, gotos are really the most straightforward way to program finite state machines in C.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Actually a for(;;) switch (state) { ... } is the most straightforward way to do this.  However, the goto method is clearly much faster in C.  (Although perhaps, super-duper compilers like Clang might be able to transform the for switch() scheme into just a sequence of gotos.)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_11diqhr", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/11diqhr/gotophobia_considered_harmful_in_c/jaa4ipd/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/11diqhr/gotophobia_considered_harmful_in_c/", "name": "t1_jaa4ipd", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1677540019.0, "created_utc": 1677540019.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://blog.joren.ga/gotophobia-harmful"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2ugkz", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Ivermectin Kills Prostate Cancer Cells", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ScienceUncensored", "link_author": "Objective-Run-2757", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j6rmbj6", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "websnarf", "num_comments": 547, "can_mod_post": false, "send_replies": true, "parent_id": "t1_j6r4v3o", "score": 2, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Citation?", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Citation?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_10qffe8", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ScienceUncensored/comments/10qffe8/ivermectin_kills_prostate_cancer_cells/j6rmbj6/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ScienceUncensored/comments/10qffe8/ivermectin_kills_prostate_cancer_cells/", "name": "t1_j6rmbj6", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ScienceUncensored", "author_flair_text": null, "treatment_tags": [], "created": 1675253599.0, "created_utc": 1675253599.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://pubmed.ncbi.nlm.nih.gov/36050295/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1i", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What is a public figure or artist who has done horrible things but that people continue to follow or listen?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "AskReddit", "link_author": "lattekosmiko", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j6oshfs", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 17011, "can_mod_post": false, "send_replies": true, "parent_id": "t1_j6mls9q", "score": 2, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "The US has the death penalty, and France refuses to extradite him.  From France's point of view, its a question of whether the loophole is worse, or the US laws are worse.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The US has the death penalty, and France refuses to extradite him.  From France&amp;#39;s point of view, its a question of whether the loophole is worse, or the US laws are worse.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_10pvxdu", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/AskReddit/comments/10pvxdu/what_is_a_public_figure_or_artist_who_has_done/j6oshfs/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/AskReddit/comments/10pvxdu/what_is_a_public_figure_or_artist_who_has_done/", "name": "t1_j6oshfs", "author_flair_template_id": null, "subreddit_name_prefixed": "r/AskReddit", "author_flair_text": null, "treatment_tags": [], "created": 1675198860.0, "created_utc": 1675198860.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/AskReddit/comments/10pvxdu/what_is_a_public_figure_or_artist_who_has_done/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1i", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What is a public figure or artist who has done horrible things but that people continue to follow or listen?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "AskReddit", "link_author": "lattekosmiko", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j6os7r5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 17011, "can_mod_post": false, "send_replies": true, "parent_id": "t3_10pvxdu", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "George W. Bush?", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;George W. Bush?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_10pvxdu", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/AskReddit/comments/10pvxdu/what_is_a_public_figure_or_artist_who_has_done/j6os7r5/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/AskReddit/comments/10pvxdu/what_is_a_public_figure_or_artist_who_has_done/", "name": "t1_j6os7r5", "author_flair_template_id": null, "subreddit_name_prefixed": "r/AskReddit", "author_flair_text": null, "treatment_tags": [], "created": 1675198762.0, "created_utc": 1675198762.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/AskReddit/comments/10pvxdu/what_is_a_public_figure_or_artist_who_has_done/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Managing Irrational Numbers Without Floats", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "hebozhe", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j6efy74", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 40, "can_mod_post": false, "send_replies": true, "parent_id": "t3_10nxogc", "score": 2, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Irrational numbers can take all sorts of arbitrary forms.  For example, are you going to eventually have support for transcendental functions like sin, cos, log, and their inverses?  Have you heard of Lambert's W function?  More insane exponential relationships are possible as well.\n\nEven if you are just confining yourself to basic arithmetic (including nth roots) there is no simple finite way to encode any arbitrary expression (consider (1/2)^(1/2) + (1/3)^(1/3) + ... (1/n)^(1/n) for any n).  But that doesn't mean all hope is lost.  If you take the lead of computer algebra systems like Mathematica or Maple, then you can just do what they do, which is to allow for arbitrary expressions and just leave them that way, with some sort of built-in normalization or simplification.  The trade-off here is that while this allows you to track any calculation exactly, you cannot ultimately resolve some simple operations like determining if two expressions are even equal.\n\nOn the other hand, if you demand that equality or ordering be always resolvable, and don't really need over-the-top general numeric expressivity, then you could mix your case (1) with a partial symbolic algebra system.  That is to say, if an expression gets too complicated, you can throw an exception.  I have not thought this through, so I don't know if there's value here that is worth the complexity.  If for example, you set your base number form to be (a/b)^(c/d) for some artibtrarily sized integers a, b, c, d with gcd(a,b)=gcd(c,d)=1, then it is easy to determine if two values are equal, or even if one is larger than the other.   However, if you allow for arbitrary sums of those number to also be numbers, then I don't know how to test for equality or ordering in a reliable or finite algorithm.  So you could throw a \"too complicated exception\" if the sum of the numbers cannot easily be put into the (a/b)^(c/d) form, but would programmers be ok with that?\n\nAs far as using approximations is concerned, programmers will almost always want something like this.  But this can be accomplished with a \"floor()\" function.  So for any input number, if you want to find a close rational approximation to x, you merely require that a denominator, d, be chosen (which sets your accuracy), and you compute n = floor((x + 1/2)*d) and voila, n/d becomes your approximation for x.  This gives you a superset of the numerical power of any floating point system, leaving all the problems associated with them in the hands of the developer.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Irrational numbers can take all sorts of arbitrary forms.  For example, are you going to eventually have support for transcendental functions like sin, cos, log, and their inverses?  Have you heard of Lambert&amp;#39;s W function?  More insane exponential relationships are possible as well.&lt;/p&gt;\n\n&lt;p&gt;Even if you are just confining yourself to basic arithmetic (including nth roots) there is no simple finite way to encode any arbitrary expression (consider (1/2)&lt;sup&gt;1/2&lt;/sup&gt; + (1/3)&lt;sup&gt;1/3&lt;/sup&gt; + ... (1/n)&lt;sup&gt;1/n&lt;/sup&gt; for any n).  But that doesn&amp;#39;t mean all hope is lost.  If you take the lead of computer algebra systems like Mathematica or Maple, then you can just do what they do, which is to allow for arbitrary expressions and just leave them that way, with some sort of built-in normalization or simplification.  The trade-off here is that while this allows you to track any calculation exactly, you cannot ultimately resolve some simple operations like determining if two expressions are even equal.&lt;/p&gt;\n\n&lt;p&gt;On the other hand, if you demand that equality or ordering be always resolvable, and don&amp;#39;t really need over-the-top general numeric expressivity, then you could mix your case (1) with a partial symbolic algebra system.  That is to say, if an expression gets too complicated, you can throw an exception.  I have not thought this through, so I don&amp;#39;t know if there&amp;#39;s value here that is worth the complexity.  If for example, you set your base number form to be (a/b)&lt;sup&gt;c/d&lt;/sup&gt; for some artibtrarily sized integers a, b, c, d with gcd(a,b)=gcd(c,d)=1, then it is easy to determine if two values are equal, or even if one is larger than the other.   However, if you allow for arbitrary sums of those number to also be numbers, then I don&amp;#39;t know how to test for equality or ordering in a reliable or finite algorithm.  So you could throw a &amp;quot;too complicated exception&amp;quot; if the sum of the numbers cannot easily be put into the (a/b)&lt;sup&gt;c/d&lt;/sup&gt; form, but would programmers be ok with that?&lt;/p&gt;\n\n&lt;p&gt;As far as using approximations is concerned, programmers will almost always want something like this.  But this can be accomplished with a &amp;quot;floor()&amp;quot; function.  So for any input number, if you want to find a close rational approximation to x, you merely require that a denominator, d, be chosen (which sets your accuracy), and you compute n = floor((x + 1/2)*d) and voila, n/d becomes your approximation for x.  This gives you a superset of the numerical power of any floating point system, leaving all the problems associated with them in the hands of the developer.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_10nxogc", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/10nxogc/managing_irrational_numbers_without_floats/j6efy74/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/10nxogc/managing_irrational_numbers_without_floats/", "name": "t1_j6efy74", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1675021636.0, "created_utc": 1675021636.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/10nxogc/managing_irrational_numbers_without_floats/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Could you explain why sum types are so good?", "mod_reason_by": null, "banned_by": null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "plentifulfuture", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j5kl588", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 75, "can_mod_post": false, "send_replies": true, "parent_id": "t3_10jewgp", "score": 6, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Inheritance is for creating type hierarchies.  For two different types to be resolved to the same thing, one has to inherit from the other (possibly through many levels of indirection) and the lowest common denominator of the two becomes the base common type.\n\nSum types, as I understand it, are pure tagged unions.  The component types don't have to have anything to do with each other.  In a safe system, the point is that you cannot access the component type without first establishing the correct corresponding tag.  A lot of languages have introduced \"pattern matching\" which is a kind of switch()-like statement that guards the component access by its tag.\n\nOne purpose of sum types is to allow for handling errors from a function that is supposed to return a resource or something composed of them.  If you return a sum type that includes either an error code, or the resource-filled return value, then you can handle potential errors at the call site without the use of exceptions, or \"sentinels\" (like NULL) that act as a stand-in for errors.  In fact, the idea is to force callers to deal with types through this error checking so that semantic errors (like trying to write to a file you didn't successfully open) cannot happen.\n\nUsing sum-types as part of your AST parsing also seems like a reasonable application of the concept.  You only want to treat each node according to what type they really are.  On the other hand, each node represents exactly one of the various kinds of constructs in your language.  I don't think inheritance helps you very much in AST node definition, unless you have a lot of constructs with common features that you want handled in a uniform way during translation.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Inheritance is for creating type hierarchies.  For two different types to be resolved to the same thing, one has to inherit from the other (possibly through many levels of indirection) and the lowest common denominator of the two becomes the base common type.&lt;/p&gt;\n\n&lt;p&gt;Sum types, as I understand it, are pure tagged unions.  The component types don&amp;#39;t have to have anything to do with each other.  In a safe system, the point is that you cannot access the component type without first establishing the correct corresponding tag.  A lot of languages have introduced &amp;quot;pattern matching&amp;quot; which is a kind of switch()-like statement that guards the component access by its tag.&lt;/p&gt;\n\n&lt;p&gt;One purpose of sum types is to allow for handling errors from a function that is supposed to return a resource or something composed of them.  If you return a sum type that includes either an error code, or the resource-filled return value, then you can handle potential errors at the call site without the use of exceptions, or &amp;quot;sentinels&amp;quot; (like NULL) that act as a stand-in for errors.  In fact, the idea is to force callers to deal with types through this error checking so that semantic errors (like trying to write to a file you didn&amp;#39;t successfully open) cannot happen.&lt;/p&gt;\n\n&lt;p&gt;Using sum-types as part of your AST parsing also seems like a reasonable application of the concept.  You only want to treat each node according to what type they really are.  On the other hand, each node represents exactly one of the various kinds of constructs in your language.  I don&amp;#39;t think inheritance helps you very much in AST node definition, unless you have a lot of constructs with common features that you want handled in a uniform way during translation.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_10jewgp", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/10jewgp/could_you_explain_why_sum_types_are_so_good/j5kl588/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/10jewgp/could_you_explain_why_sum_types_are_so_good/", "name": "t1_j5kl588", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1674496447.0, "created_utc": 1674496447.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/10jewgp/could_you_explain_why_sum_types_are_so_good/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1i", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What film have you seen dozens and dozens of times?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "AskReddit", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j4gj55u", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 5710, "can_mod_post": false, "send_replies": true, "parent_id": "t1_j4ezl3r", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Sir?", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Sir?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_10c6khn", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/AskReddit/comments/10c6khn/what_film_have_you_seen_dozens_and_dozens_of_times/j4gj55u/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/AskReddit/comments/10c6khn/what_film_have_you_seen_dozens_and_dozens_of_times/", "name": "t1_j4gj55u", "author_flair_template_id": null, "subreddit_name_prefixed": "r/AskReddit", "author_flair_text": null, "treatment_tags": [], "created": 1673798335.0, "created_utc": 1673798335.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/AskReddit/comments/10c6khn/what_film_have_you_seen_dozens_and_dozens_of_times/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qhlj", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What single person has had the most consequential impact on the human race?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ask", "link_author": "ZoomJuice7", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j4f0cts", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 2623, "can_mod_post": false, "send_replies": true, "parent_id": "t1_j4enc0q", "score": 2, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "No.  It was the first person to construct a fence around the crop that mattered.  If you go to the trouble of planting a seed then wait for a crop, you also need to make sure some other animal doesn't just steal the fruits of your labor.  Breeding, was just a later optimization.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;No.  It was the first person to construct a fence around the crop that mattered.  If you go to the trouble of planting a seed then wait for a crop, you also need to make sure some other animal doesn&amp;#39;t just steal the fruits of your labor.  Breeding, was just a later optimization.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_10c813w", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ask/comments/10c813w/what_single_person_has_had_the_most_consequential/j4f0cts/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ask/comments/10c813w/what_single_person_has_had_the_most_consequential/", "name": "t1_j4f0cts", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ask", "author_flair_text": null, "treatment_tags": [], "created": 1673762905.0, "created_utc": 1673762905.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ask/comments/10c813w/what_single_person_has_had_the_most_consequential/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1i", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What film have you seen dozens and dozens of times?", "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "AskReddit", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j4ez408", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 5710, "can_mod_post": false, "send_replies": true, "parent_id": "t1_j4e4uqu", "score": 3, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Well ... We need to know what we're calling it for.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Well ... We need to know what we&amp;#39;re calling it for.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_10c6khn", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/AskReddit/comments/10c6khn/what_film_have_you_seen_dozens_and_dozens_of_times/j4ez408/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/AskReddit/comments/10c6khn/what_film_have_you_seen_dozens_and_dozens_of_times/", "name": "t1_j4ez408", "author_flair_template_id": null, "subreddit_name_prefixed": "r/AskReddit", "author_flair_text": null, "treatment_tags": [], "created": 1673762117.0, "created_utc": 1673762117.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/AskReddit/comments/10c6khn/what_film_have_you_seen_dozens_and_dozens_of_times/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "1 Problem, 24 Programming Languages", "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "arkethos", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j45cnzn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 10, "can_mod_post": false, "send_replies": true, "parent_id": "t3_109l4sm", "score": 3, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "The C++ std:: STL thing is probably rigged for exactly this problem, which is dumb.   The author is celebrating terseness at the expense of performance in most of the languages when the right answer is to use a kind of binary search to find the positive group length, then repeat this for the negative group length, then just subtract the two lengths.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The C++ std:: STL thing is probably rigged for exactly this problem, which is dumb.   The author is celebrating terseness at the expense of performance in most of the languages when the right answer is to use a kind of binary search to find the positive group length, then repeat this for the negative group length, then just subtract the two lengths.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_109l4sm", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/109l4sm/1_problem_24_programming_languages/j45cnzn/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/109l4sm/1_problem_24_programming_languages/", "name": "t1_j45cnzn", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1673594105.0, "created_utc": 1673594105.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://youtu.be/U6I-Kwj-AvY"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Language wars: the personal factor", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "Inconstant_Moo", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j3i59wn", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 40, "can_mod_post": false, "send_replies": true, "parent_id": "t3_106ah7j", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "&gt; What we want from a language, is that it reduces our cognitive overhead and lets us as near as possible just think about the algorithm.\n\nRight.  But go tell that to the C++, Haskell, Perl, APL, or Lisp people.  The more time the programmer spends learning the language and thinking about its details when they are writing code, the less time they will be solving algorithm and program design problems.\n\n&gt;  And it would be really weird if we all had the same brains.\n\nThat speaks to the need for more flexibility and fewer coding conventions.\n\n&gt; ... I like syntactic whitespace for the same reason the people who like braces like braces. ...\n\nPython has shown us that it is quite reasonable to use whitespace to describe scope.  However, there may be technical reasons why a language doesn't want to do that.  For example, if you have some sort of automatic code generation that injects code in place, it might be awkward to describe \"current scope\" by indentation.\n\n&gt; There are people who don\u2019t like type inference. For them, the additional overhead of reasoning about types when you read the code exceeds the savings of not reasoning about types when you write the code.\n\nI don't at all understand that.  If your language allows for reasonably deterministic type inference then there is nothing lost in leveraging that.  The type-checking safety is for making sure you are not mixing up your data structure semantics.  Type inference saves you from the additional source text synchronization (i.e., boilerplate) required for using static typing.  As they get more complicated, type syntax tends to become unreadable, so type inference is a great way to mitigate this.\n\n&gt; ... (I\u2019ve seen people say they were going to quit Go because of the introduction of generics.)\n\nThat makes no sense to me.  Are the generics they are introducing in Go really bad?  A modern language without some sort of meta-programming is basically a joke.  You need *something*; templates and generics are the typical way to go as far as I've seen.  (Though the approaches of Zig and Jai seem even more interesting to me.)  6502 assembly language is simple -- you should not confuse simple, with \"easy to reason about\".\n\nI think the balance is not hard to figure out: C++ has so many features there is basically no saving that language (this is the main reason why this subreddit exists), Languages like Lua and Python are comparatively feature sparse but are missing critical features like meta-programming and native multithreading.  So you want to add just enough complexity to support as many features as your target audience will desire, and then just stop adding features and behaviors that do not add true functionality.  In the case of Go, the lack of generics is clearly just a missing (very important) feature that their over-embrace of simplicity left them with.  Adding generics is so clearly the correct thing for them to do.\n\n&gt; ... if they\u2019ve never wanted to do the things you do in your favorite language, of course, they\u2019re only going to see its difficulties and not its virtues.\n\nWell if you want to have widespread adoption of your language, why don't you try to design it to have the fewest difficulties possible, no matter what they are doing?  I mean you can start by modeling your language around an existing language (or subset), so you can leverage all the work that went into solving problems in that existing language while adding your \"pet features\" or whatever your core purpose is.  If your language is too narrow in scope, you had better expect that people will start from a position of rejecting it.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;What we want from a language, is that it reduces our cognitive overhead and lets us as near as possible just think about the algorithm.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Right.  But go tell that to the C++, Haskell, Perl, APL, or Lisp people.  The more time the programmer spends learning the language and thinking about its details when they are writing code, the less time they will be solving algorithm and program design problems.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;And it would be really weird if we all had the same brains.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That speaks to the need for more flexibility and fewer coding conventions.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;... I like syntactic whitespace for the same reason the people who like braces like braces. ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Python has shown us that it is quite reasonable to use whitespace to describe scope.  However, there may be technical reasons why a language doesn&amp;#39;t want to do that.  For example, if you have some sort of automatic code generation that injects code in place, it might be awkward to describe &amp;quot;current scope&amp;quot; by indentation.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;There are people who don\u2019t like type inference. For them, the additional overhead of reasoning about types when you read the code exceeds the savings of not reasoning about types when you write the code.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I don&amp;#39;t at all understand that.  If your language allows for reasonably deterministic type inference then there is nothing lost in leveraging that.  The type-checking safety is for making sure you are not mixing up your data structure semantics.  Type inference saves you from the additional source text synchronization (i.e., boilerplate) required for using static typing.  As they get more complicated, type syntax tends to become unreadable, so type inference is a great way to mitigate this.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;... (I\u2019ve seen people say they were going to quit Go because of the introduction of generics.)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;That makes no sense to me.  Are the generics they are introducing in Go really bad?  A modern language without some sort of meta-programming is basically a joke.  You need &lt;em&gt;something&lt;/em&gt;; templates and generics are the typical way to go as far as I&amp;#39;ve seen.  (Though the approaches of Zig and Jai seem even more interesting to me.)  6502 assembly language is simple -- you should not confuse simple, with &amp;quot;easy to reason about&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;I think the balance is not hard to figure out: C++ has so many features there is basically no saving that language (this is the main reason why this subreddit exists), Languages like Lua and Python are comparatively feature sparse but are missing critical features like meta-programming and native multithreading.  So you want to add just enough complexity to support as many features as your target audience will desire, and then just stop adding features and behaviors that do not add true functionality.  In the case of Go, the lack of generics is clearly just a missing (very important) feature that their over-embrace of simplicity left them with.  Adding generics is so clearly the correct thing for them to do.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;... if they\u2019ve never wanted to do the things you do in your favorite language, of course, they\u2019re only going to see its difficulties and not its virtues.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Well if you want to have widespread adoption of your language, why don&amp;#39;t you try to design it to have the fewest difficulties possible, no matter what they are doing?  I mean you can start by modeling your language around an existing language (or subset), so you can leverage all the work that went into solving problems in that existing language while adding your &amp;quot;pet features&amp;quot; or whatever your core purpose is.  If your language is too narrow in scope, you had better expect that people will start from a position of rejecting it.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_106ah7j", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/106ah7j/language_wars_the_personal_factor/j3i59wn/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/106ah7j/language_wars_the_personal_factor/", "name": "t1_j3i59wn", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1673205349.0, "created_utc": 1673205349.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/106ah7j/language_wars_the_personal_factor/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_33upf", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Logical Fallacy or just obnoxious rhetorical technique?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "logicalfallacy", "link_author": "JacqueShellacque", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j339ujr", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 5, "can_mod_post": false, "send_replies": true, "parent_id": "t3_1041y2y", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "&gt; \"Why would individual X lie?\"\n\nUsually what matters here is context.  Suppose the individual is, by default, highly motivated to tell the truth.  Then asking why they would lie, is meant to put the onus on you.  This is appropriate if there is some good reason to think that the individual would not lie.  However, absence of this sort of context, of course, such a question is just empty rhetorical nonsense that needs no other response than \"Because he/she can\".\n\nI don't understand the formula you are going for in your second quote.  However, your example is just stating what should be stereotypical, or statistical knowledge and presenting it as a definitive statement.  This is indeed a rhetorical device, but a mild one if that.  It should be understood by educated people that the definitive statements in this case clearly are just being used stand-ins for statements that should be qualified by probabilities.  This isn't a fallacy unless the person is misrepresenting a stereotype (for example, claiming Christians are persecuted in the US -- they are not) or is expecting a literal interpretation of definitive truth instead of a statistical truth (all yelling black people get shot by cops without exception -- that can't be true).", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;&amp;quot;Why would individual X lie?&amp;quot;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Usually what matters here is context.  Suppose the individual is, by default, highly motivated to tell the truth.  Then asking why they would lie, is meant to put the onus on you.  This is appropriate if there is some good reason to think that the individual would not lie.  However, absence of this sort of context, of course, such a question is just empty rhetorical nonsense that needs no other response than &amp;quot;Because he/she can&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t understand the formula you are going for in your second quote.  However, your example is just stating what should be stereotypical, or statistical knowledge and presenting it as a definitive statement.  This is indeed a rhetorical device, but a mild one if that.  It should be understood by educated people that the definitive statements in this case clearly are just being used stand-ins for statements that should be qualified by probabilities.  This isn&amp;#39;t a fallacy unless the person is misrepresenting a stereotype (for example, claiming Christians are persecuted in the US -- they are not) or is expecting a literal interpretation of definitive truth instead of a statistical truth (all yelling black people get shot by cops without exception -- that can&amp;#39;t be true).&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_1041y2y", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/logicalfallacy/comments/1041y2y/logical_fallacy_or_just_obnoxious_rhetorical/j339ujr/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/logicalfallacy/comments/1041y2y/logical_fallacy_or_just_obnoxious_rhetorical/", "name": "t1_j339ujr", "author_flair_template_id": null, "subreddit_name_prefixed": "r/logicalfallacy", "author_flair_text": null, "treatment_tags": [], "created": 1672946949.0, "created_utc": 1672946949.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/logicalfallacy/comments/1041y2y/logical_fallacy_or_just_obnoxious_rhetorical/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Does Rust have the ultimate memory management solution?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "Zaleru", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j30biqd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 104, "can_mod_post": false, "send_replies": true, "parent_id": "t1_j2zm3pg", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "&gt; You are confusing realtime performance with throughput performance. Garbage collected languages can maintain higher throughput than manually allocated languages unless absolutely exorbitant amounts of development effort (like 20x) are spent on the manually allocated one.\n\nI am not confusing anything.  The probability that a new allocation in a GC-based language comes from the L1 CPU D-cache is always near zero.  While in any precise memory tracking language, the probability that a new allocation comes from the L1 CPU D-cache is typically very high (and depending on program design, can be &gt; 99%).  So claims that GC languages have higher throughput on memory allocations are utter nonsense.\n\n&gt; We've know this \"for 35 years now\" ...\n\nA citation from 1987?  I agree that any algorithm is better than the kinds of nonsense I've seen in the implementation of BSD's malloc and free (which are not even O(1) per call) which would have been widely used at the time.  But nobody uses those algorithms (or anything that resembles them) anymore.\n\n&gt; and it's re-proven \"all the time\" ...\n\nThis article describes using a memory pool strategy for string management.  This primary point is that you free all the strings simultaneously (i.e, they are pre-marked, and do not contain any random pointers within them) in one shot when you free the dictionary.  I.e., recycling memory has an amortized cost near 0 because of the special nature of the application itself.  The author emphasizes that that is where their performance boost comes from.  No GC strategy has a near zero recycling cost for any non-trivial situation.  This is not a model for GC in any way shape or form.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;You are confusing realtime performance with throughput performance. Garbage collected languages can maintain higher throughput than manually allocated languages unless absolutely exorbitant amounts of development effort (like 20x) are spent on the manually allocated one.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I am not confusing anything.  The probability that a new allocation in a GC-based language comes from the L1 CPU D-cache is always near zero.  While in any precise memory tracking language, the probability that a new allocation comes from the L1 CPU D-cache is typically very high (and depending on program design, can be &amp;gt; 99%).  So claims that GC languages have higher throughput on memory allocations are utter nonsense.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;We&amp;#39;ve know this &amp;quot;for 35 years now&amp;quot; ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;A citation from 1987?  I agree that any algorithm is better than the kinds of nonsense I&amp;#39;ve seen in the implementation of BSD&amp;#39;s malloc and free (which are not even O(1) per call) which would have been widely used at the time.  But nobody uses those algorithms (or anything that resembles them) anymore.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;and it&amp;#39;s re-proven &amp;quot;all the time&amp;quot; ...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;This article describes using a memory pool strategy for string management.  This primary point is that you free all the strings simultaneously (i.e, they are pre-marked, and do not contain any random pointers within them) in one shot when you free the dictionary.  I.e., recycling memory has an amortized cost near 0 because of the special nature of the application itself.  The author emphasizes that that is where their performance boost comes from.  No GC strategy has a near zero recycling cost for any non-trivial situation.  This is not a model for GC in any way shape or form.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_102ugt7", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/102ugt7/does_rust_have_the_ultimate_memory_management/j30biqd/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/102ugt7/does_rust_have_the_ultimate_memory_management/", "name": "t1_j30biqd", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1672892276.0, "created_utc": 1672892276.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/102ugt7/does_rust_have_the_ultimate_memory_management/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Does Rust have the ultimate memory management solution?", "mod_reason_by": null, "banned_by": null, "ups": 6, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "Zaleru", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j2xl8xj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 104, "can_mod_post": false, "send_replies": true, "parent_id": "t1_j2vev5b", "score": 6, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 1, "body": "&gt; \"Garbage collection incurs a speed penalty.\" I disagree.\n\nYou disagree?  You mean, like you think the slowness of GC is just a matter of opinion?\n\n1. General GC has to freeze the world no matter what.  \n2. Decreasing the average cost of the GC means longer times between collection, but this is synonymous with accumulating larger amounts of garbage which means garbage will first be evicted from all CPU caches, then will be reloaded in the L1 cache just to check that it really is garbage, then reassigned to the free list, but then be evicted again as a result of looking at other potential garbage, then reloaded into the CPU cache when it is recycled for a new allocation.  OTOH, anything that is based around precise lifetime tracking has a very high probability of cache re-use immediately without any evictions.\n\n&gt; ...  in return for something typically greater: memory safety,\n\nGC is safer than Rust, Nim, or Swift?  (None of those languages use general GC, and all of them claim high levels of safety.)\n\n&gt; simpler programming, and clearer abstractions.\n\nBut what if I want actual programmer-defined destructors?  The classic case is having an object's lifetime synchronized with a file handle or network connection.  Relying on automatic deterministic destruction on either scope exit or other data structure clean-up to close your files/network connection, makes your code simpler and less error-prone than having to remember to call a .close() method exactly once in exact correspondence with the last usage of a file/network connection.\n\nOp wrote:\n&gt; Other languages adopted an intermediate solution using reference counter and requiring the programmer to deal with weak pointer, but it is also slow.\n\nYou might like to look up Perceus/Koka.  The idea is to burden the compiler with analysis that lets it remove much of your ref counting overhead.  There are other ideas like was proposed in an early version of Lobster that simply performed memory leak *detection* rather than garbage collection which pushes the burden back to the programmer, but in a way that is as compiler/program-assisted as possible.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;&amp;quot;Garbage collection incurs a speed penalty.&amp;quot; I disagree.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You disagree?  You mean, like you think the slowness of GC is just a matter of opinion?&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;General GC has to freeze the world no matter what.&lt;br/&gt;&lt;/li&gt;\n&lt;li&gt;Decreasing the average cost of the GC means longer times between collection, but this is synonymous with accumulating larger amounts of garbage which means garbage will first be evicted from all CPU caches, then will be reloaded in the L1 cache just to check that it really is garbage, then reassigned to the free list, but then be evicted again as a result of looking at other potential garbage, then reloaded into the CPU cache when it is recycled for a new allocation.  OTOH, anything that is based around precise lifetime tracking has a very high probability of cache re-use immediately without any evictions.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;...  in return for something typically greater: memory safety,&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;GC is safer than Rust, Nim, or Swift?  (None of those languages use general GC, and all of them claim high levels of safety.)&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;simpler programming, and clearer abstractions.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;But what if I want actual programmer-defined destructors?  The classic case is having an object&amp;#39;s lifetime synchronized with a file handle or network connection.  Relying on automatic deterministic destruction on either scope exit or other data structure clean-up to close your files/network connection, makes your code simpler and less error-prone than having to remember to call a .close() method exactly once in exact correspondence with the last usage of a file/network connection.&lt;/p&gt;\n\n&lt;p&gt;Op wrote:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Other languages adopted an intermediate solution using reference counter and requiring the programmer to deal with weak pointer, but it is also slow.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;You might like to look up Perceus/Koka.  The idea is to burden the compiler with analysis that lets it remove much of your ref counting overhead.  There are other ideas like was proposed in an early version of Lobster that simply performed memory leak &lt;em&gt;detection&lt;/em&gt; rather than garbage collection which pushes the burden back to the programmer, but in a way that is as compiler/program-assisted as possible.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_102ugt7", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/102ugt7/does_rust_have_the_ultimate_memory_management/j2xl8xj/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/102ugt7/does_rust_have_the_ultimate_memory_management/", "name": "t1_j2xl8xj", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1672853794.0, "created_utc": 1672853794.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/102ugt7/does_rust_have_the_ultimate_memory_management/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What features would you want in a new programming language?", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "Captain_Lesbee_Ziner", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j2xg4i8", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 237, "can_mod_post": false, "send_replies": true, "parent_id": "t1_j2vattb", "score": 2, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Simple -- just make a language that has every language feature imaginable.  :)", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Simple -- just make a language that has every language feature imaginable.  :)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_102r0ke", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/102r0ke/what_features_would_you_want_in_a_new_programming/j2xg4i8/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/102r0ke/what_features_would_you_want_in_a_new_programming/", "name": "t1_j2xg4i8", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1672851881.0, "created_utc": 1672851881.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/102r0ke/what_features_would_you_want_in_a_new_programming/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Dynamic number type", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "MichalMarsalek", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "j1ioqkf", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 23, "can_mod_post": false, "send_replies": true, "parent_id": "t3_zju3b0", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "What you wrote in your design makes perfect sense, but I don't know why you call them irrational and rational.  Why not simply floating point and rational?  You can't represent any appreciable measure of irrationals in a finite computing system anyway, so I don't get why you would call them that.  However, actual rationals with arbitrary sized numerators and denominators are a superset of floating point -- so in a sense, you have to justify the existence of floating point in your system.  Performance, and/or approximation (to support sqrt, trig, log, etc) would be the typical justification.\n\nOne *new* issue you have to deal with is run-away rational component sizes.  It is not hard to construct arithmetic expressions that will have you running out of memory or running absurdly slow for even the simplest operations.  You might like to have an \"approximate\" function that finds the closest rational with the denominator being limited to some number of bits.\n\nAs to your implementation details, why wouldn't you just treat the NaN pattern as an escape mode, and use the remaining 50ish bits or so as meta data for your rational number?  For ex, 25 bits for each of the numerator and denominator base-digit length.  I suppose you want to reserve at least one but pattern to just mean an actual NaN in floating point if you still need or want that. But otherwise, the rational meta data patterns would imply that it was just a header, and is followed by the digits of your rational.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What you wrote in your design makes perfect sense, but I don&amp;#39;t know why you call them irrational and rational.  Why not simply floating point and rational?  You can&amp;#39;t represent any appreciable measure of irrationals in a finite computing system anyway, so I don&amp;#39;t get why you would call them that.  However, actual rationals with arbitrary sized numerators and denominators are a superset of floating point -- so in a sense, you have to justify the existence of floating point in your system.  Performance, and/or approximation (to support sqrt, trig, log, etc) would be the typical justification.&lt;/p&gt;\n\n&lt;p&gt;One &lt;em&gt;new&lt;/em&gt; issue you have to deal with is run-away rational component sizes.  It is not hard to construct arithmetic expressions that will have you running out of memory or running absurdly slow for even the simplest operations.  You might like to have an &amp;quot;approximate&amp;quot; function that finds the closest rational with the denominator being limited to some number of bits.&lt;/p&gt;\n\n&lt;p&gt;As to your implementation details, why wouldn&amp;#39;t you just treat the NaN pattern as an escape mode, and use the remaining 50ish bits or so as meta data for your rational number?  For ex, 25 bits for each of the numerator and denominator base-digit length.  I suppose you want to reserve at least one but pattern to just mean an actual NaN in floating point if you still need or want that. But otherwise, the rational meta data patterns would imply that it was just a header, and is followed by the digits of your rational.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_zju3b0", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/zju3b0/dynamic_number_type/j1ioqkf/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/zju3b0/dynamic_number_type/", "name": "t1_j1ioqkf", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1671904817.0, "created_utc": 1671904817.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/zju3b0/dynamic_number_type/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qi8m", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "[deleted by user]", "mod_reason_by": null, "banned_by": null, "ups": 0, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ProgrammingLanguages", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "izlvde3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 4, "can_mod_post": false, "send_replies": true, "parent_id": "t3_zbjctm", "score": 0, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Rust and Go use UTF-8 because it is the standard Linux encoding for Unicode, and the Windows/Solaris encoding of UTF-16 is very inefficient for English text.\n\n&gt; Rust will crash without chance of recovery when you try to access the \"last character of the string\" believing s.len() to be the length in characters\n\nUhh ... s.charat(s.length()) is a bounds error in most 0-based array languages (i.e., all of them except LUA, and BASIC, as far as I am concerned.)  So there is nothing special about Rust or Go in this respect.\n\n&gt; Worse: It will run fine as long as you stick to English text, and will crash in production when the first Umlaut hits.\n\nNo, Rust should go ahead and fail when you go past the end regardless of the text content.  Umlauts should not be the culprit.\n\n&gt; random character access is O(n) instead of O(1) like in C, C#, Java, Python...\n\nIf by \"character\" you mean a grapheme, then none of those languages will access them by an index in O(1) time.  At least not using the built-in string facilities.  The trouble with Unicode is that it does not encode direct \"characters\" or graphemes.  The text content is encoded as a stream of \"code points\" which typically need to be further parsed to extract the grapheme content via a \"normalization\" algorithm.  In essence, graphemes are composed of between 1 and 16 code points, and a code point is encoded between 1 and 4 bytes (in UTF-8).  In ASCII, it's one byte per code point, then 1 code point per character.  On the other end of the spectrum, there's an Arabic grapheme that can be composed of 16 code points.  I.e., Unicode is variable length with respect to code points, and all the transfer formats (UTF-8/UTF-16/UTF-32) just encode code points.  So the straightforward encodings will always lead to O(n) \"character\" access time no matter what.\n\nIf you want something with O(1) grapheme index access, you will need to make some kind of auto-normalization of your strings as they are formed, and as they are being modified (probably with some sort of index cache).  It is certainly possible, and any modern language with OO capabilities (which I believe Rust supports; though apparently Go does not) to make a \"normalized string\" object which suits your needs.  But I am unaware of anything built-in that does that.\n\n&gt; - additional burden on the programmer, who has to deal with this transport encoding everywhere, instead of dealing with the actual problem to be solved.\n\nI do not know Rust's or Go's library, so I cannot comment with authority.  However, if they have a library function that implements the normalization and compatibility algorithms (Unicode provides reference code for this), and exposes the Unicode attribute tables, then they have their bases covered.  Developers of word processors or HTML renderers (like Firefox, which I believe they are trying to rewrite in Rust) should have no problem dealing with arbitrary text strings.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Rust and Go use UTF-8 because it is the standard Linux encoding for Unicode, and the Windows/Solaris encoding of UTF-16 is very inefficient for English text.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Rust will crash without chance of recovery when you try to access the &amp;quot;last character of the string&amp;quot; believing s.len() to be the length in characters&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Uhh ... s.charat(s.length()) is a bounds error in most 0-based array languages (i.e., all of them except LUA, and BASIC, as far as I am concerned.)  So there is nothing special about Rust or Go in this respect.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Worse: It will run fine as long as you stick to English text, and will crash in production when the first Umlaut hits.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;No, Rust should go ahead and fail when you go past the end regardless of the text content.  Umlauts should not be the culprit.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;random character access is O(n) instead of O(1) like in C, C#, Java, Python...&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;If by &amp;quot;character&amp;quot; you mean a grapheme, then none of those languages will access them by an index in O(1) time.  At least not using the built-in string facilities.  The trouble with Unicode is that it does not encode direct &amp;quot;characters&amp;quot; or graphemes.  The text content is encoded as a stream of &amp;quot;code points&amp;quot; which typically need to be further parsed to extract the grapheme content via a &amp;quot;normalization&amp;quot; algorithm.  In essence, graphemes are composed of between 1 and 16 code points, and a code point is encoded between 1 and 4 bytes (in UTF-8).  In ASCII, it&amp;#39;s one byte per code point, then 1 code point per character.  On the other end of the spectrum, there&amp;#39;s an Arabic grapheme that can be composed of 16 code points.  I.e., Unicode is variable length with respect to code points, and all the transfer formats (UTF-8/UTF-16/UTF-32) just encode code points.  So the straightforward encodings will always lead to O(n) &amp;quot;character&amp;quot; access time no matter what.&lt;/p&gt;\n\n&lt;p&gt;If you want something with O(1) grapheme index access, you will need to make some kind of auto-normalization of your strings as they are formed, and as they are being modified (probably with some sort of index cache).  It is certainly possible, and any modern language with OO capabilities (which I believe Rust supports; though apparently Go does not) to make a &amp;quot;normalized string&amp;quot; object which suits your needs.  But I am unaware of anything built-in that does that.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;ul&gt;\n&lt;li&gt;additional burden on the programmer, who has to deal with this transport encoding everywhere, instead of dealing with the actual problem to be solved.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I do not know Rust&amp;#39;s or Go&amp;#39;s library, so I cannot comment with authority.  However, if they have a library function that implements the normalization and compatibility algorithms (Unicode provides reference code for this), and exposes the Unicode attribute tables, then they have their bases covered.  Developers of word processors or HTML renderers (like Firefox, which I believe they are trying to rewrite in Rust) should have no problem dealing with arbitrary text strings.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_zbjctm", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ProgrammingLanguages/comments/zbjctm/deleted_by_user/izlvde3/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ProgrammingLanguages/comments/zbjctm/deleted_by_user/", "name": "t1_izlvde3", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ProgrammingLanguages", "author_flair_text": null, "treatment_tags": [], "created": 1670636024.0, "created_utc": 1670636024.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ProgrammingLanguages/comments/zbjctm/deleted_by_user/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_38sn2", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Primitive Technology: Slow Pottery Wheel", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "PrimitiveTechnology", "link_author": "iamjonathon", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "iynbda5", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 27, "can_mod_post": false, "send_replies": true, "parent_id": "t1_iykffv8", "score": 2, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "I think he just needed to move the upper part of the frame higher.  That should reduce the wobble substantially.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I think he just needed to move the upper part of the frame higher.  That should reduce the wobble substantially.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_z9zoet", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/PrimitiveTechnology/comments/z9zoet/primitive_technology_slow_pottery_wheel/iynbda5/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/PrimitiveTechnology/comments/z9zoet/primitive_technology_slow_pottery_wheel/", "name": "t1_iynbda5", "author_flair_template_id": null, "subreddit_name_prefixed": "r/PrimitiveTechnology", "author_flair_text": null, "treatment_tags": [], "created": 1670003447.0, "created_utc": 1670003447.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://youtu.be/Gqhxe_pL6Ws"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2cneq", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Republicans With Unlimited Sick Days Vote Against Time Off for Rail Workers", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "politics", "link_author": "Powerful_Raccoon_141", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "iyhhobt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 2037, "can_mod_post": false, "send_replies": true, "parent_id": "t1_iygnglt", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Republicans didn't do anything to Bernie.  Remember, to the Republicans, there is no difference between Biden and Sanders -- they are both just \"socialists\".  It was a collusion between the democrats and the media that screwed over Bernie (and ultimately, the American people.)", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Republicans didn&amp;#39;t do anything to Bernie.  Remember, to the Republicans, there is no difference between Biden and Sanders -- they are both just &amp;quot;socialists&amp;quot;.  It was a collusion between the democrats and the media that screwed over Bernie (and ultimately, the American people.)&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_z98nw4", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/politics/comments/z98nw4/republicans_with_unlimited_sick_days_vote_against/iyhhobt/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/politics/comments/z98nw4/republicans_with_unlimited_sick_days_vote_against/", "name": "t1_iyhhobt", "author_flair_template_id": null, "subreddit_name_prefixed": "r/politics", "author_flair_text": null, "treatment_tags": [], "created": 1669899983.0, "created_utc": 1669899983.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.newsweek.com/republicans-vote-against-time-off-rail-workers-strike-sick-days-1763688?amp=1"}}, {"kind": "t1", "data": {"subreddit_id": "t5_mouw", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Overconfidence in one's reasoning abilities and distrust of science are linked to COVID-19 conspiracy beliefs", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "science", "link_author": "mossadnik", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "iyd19oj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "websnarf", "num_comments": 1818, "can_mod_post": false, "send_replies": true, "parent_id": "t1_ixkimlp", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "The other suggestions, especially by /u/Jakaal is good.  But you can start more simply.\n\nYou can begin by verifying that the contents aren't written in crayon or posted by Taylor Lorenz, or the DailyMail.  There are tell-tale signs that a study should *NOT* be trusted.  If it is presented in a way that is clearly problematic, then if you can't find a better source, then the onus is on them to disassociate their lack of credibility with what they are saying.\n\nYou can then search for overall problems that don't rely on any specific knowledge.  If the study is not peer-reviewed, has too small of a sample size (n &gt; 1000 is required for 95% confidence in any tested statement), or comes from a field that has [reproducibility problems](https://en.wikipedia.org/wiki/Replication_crisis#Prevalence), or engages in [p-hacking](https://www.explainxkcd.com/wiki/index.php/882:_Significant), then you can be reasonably skeptical even without expertise.\n\nIn some cases, its just a matter of slogging through the material just to try to glean what you can.  A good example of this was when I was arguing with a 9/11 truther who claimed to me that there was scientific proof that the towers could not have collapsed by the results of the impacts of the airplanes hitting them.  The person arguing with me gave me a link to a paper that purported to explain exactly this.  Of course, I do not have any relevant expertise in the subjects discussed in this paper; but I tried reading it anyway.  What I discovered was that nothing discussed seemed to be connected to anything else discussed in the paper.  I also noticed that the end paper just stopped at the eemingly mid-sentence.  The paper had no conclusion, no discussion, and no list of references.  When I asked the guy what happened to the rest of the paper, he just said it was a work in progress.  Nobody writes a paper that way.  The reason the paper looked like gobledygook to me was not because of my lack of expertise, it was because it was most likely a bunch of cut and pastes from existing papers from the most technical parts that are the most difficult to decipher without context.  When I confronted the guy about what I suspected the paper was, he just got evasive, and did not answer my questions.\n\nBasic skepticism can have effective reasoning power even without expertise.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The other suggestions, especially by &lt;a href=\"/u/Jakaal\"&gt;/u/Jakaal&lt;/a&gt; is good.  But you can start more simply.&lt;/p&gt;\n\n&lt;p&gt;You can begin by verifying that the contents aren&amp;#39;t written in crayon or posted by Taylor Lorenz, or the DailyMail.  There are tell-tale signs that a study should &lt;em&gt;NOT&lt;/em&gt; be trusted.  If it is presented in a way that is clearly problematic, then if you can&amp;#39;t find a better source, then the onus is on them to disassociate their lack of credibility with what they are saying.&lt;/p&gt;\n\n&lt;p&gt;You can then search for overall problems that don&amp;#39;t rely on any specific knowledge.  If the study is not peer-reviewed, has too small of a sample size (n &amp;gt; 1000 is required for 95% confidence in any tested statement), or comes from a field that has &lt;a href=\"https://en.wikipedia.org/wiki/Replication_crisis#Prevalence\"&gt;reproducibility problems&lt;/a&gt;, or engages in &lt;a href=\"https://www.explainxkcd.com/wiki/index.php/882:_Significant\"&gt;p-hacking&lt;/a&gt;, then you can be reasonably skeptical even without expertise.&lt;/p&gt;\n\n&lt;p&gt;In some cases, its just a matter of slogging through the material just to try to glean what you can.  A good example of this was when I was arguing with a 9/11 truther who claimed to me that there was scientific proof that the towers could not have collapsed by the results of the impacts of the airplanes hitting them.  The person arguing with me gave me a link to a paper that purported to explain exactly this.  Of course, I do not have any relevant expertise in the subjects discussed in this paper; but I tried reading it anyway.  What I discovered was that nothing discussed seemed to be connected to anything else discussed in the paper.  I also noticed that the end paper just stopped at the eemingly mid-sentence.  The paper had no conclusion, no discussion, and no list of references.  When I asked the guy what happened to the rest of the paper, he just said it was a work in progress.  Nobody writes a paper that way.  The reason the paper looked like gobledygook to me was not because of my lack of expertise, it was because it was most likely a bunch of cut and pastes from existing papers from the most technical parts that are the most difficult to decipher without context.  When I confronted the guy about what I suspected the paper was, he just got evasive, and did not answer my questions.&lt;/p&gt;\n\n&lt;p&gt;Basic skepticism can have effective reasoning power even without expertise.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_z2uphc", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/science/comments/z2uphc/overconfidence_in_ones_reasoning_abilities_and/iyd19oj/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/science/comments/z2uphc/overconfidence_in_ones_reasoning_abilities_and/", "name": "t1_iyd19oj", "author_flair_template_id": null, "subreddit_name_prefixed": "r/science", "author_flair_text": null, "treatment_tags": [], "created": 1669818461.0, "created_utc": 1669818461.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.psypost.org/2022/11/overconfidence-in-ones-reasoning-abilities-and-distrust-of-science-are-linked-to-covid-19-conspiracy-beliefs-64373"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2cn1kk", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "It's okay to be wrong.", "mod_reason_by": null, "banned_by": null, "ups": 0, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "confidentlyincorrect", "link_author": "Yunners", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ixnuo5q", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 503, "can_mod_post": false, "send_replies": false, "parent_id": "t1_ixms3rh", "score": 0, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "You're getting mRNA confused with mtDNA.  \"mRNA\" = messenger Ribonucleic Acid, which is a generic stage in all protein synthesis.  mtDNA is the DNA contained in the mitochondria.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You&amp;#39;re getting mRNA confused with mtDNA.  &amp;quot;mRNA&amp;quot; = messenger Ribonucleic Acid, which is a generic stage in all protein synthesis.  mtDNA is the DNA contained in the mitochondria.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_z3ntz9", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/confidentlyincorrect/comments/z3ntz9/its_okay_to_be_wrong/ixnuo5q/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/confidentlyincorrect/comments/z3ntz9/its_okay_to_be_wrong/", "name": "t1_ixnuo5q", "author_flair_template_id": null, "subreddit_name_prefixed": "r/confidentlyincorrect", "author_flair_text": null, "treatment_tags": [], "created": 1669326928.0, "created_utc": 1669326928.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://i.imgur.com/WmUIqW6.jpg"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh1i", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "What's a subtle sign of low intelligence?", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "AskReddit", "link_author": "vjenkinsgo", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "itbrci3", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 27164, "can_mod_post": false, "send_replies": true, "parent_id": "t1_itabvid", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Dead on.  \n\nI want to point out that, IQ tests do not attempt to measure this.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Dead on.  &lt;/p&gt;\n\n&lt;p&gt;I want to point out that, IQ tests do not attempt to measure this.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_yabrxc", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/AskReddit/comments/yabrxc/whats_a_subtle_sign_of_low_intelligence/itbrci3/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/AskReddit/comments/yabrxc/whats_a_subtle_sign_of_low_intelligence/", "name": "t1_itbrci3", "author_flair_template_id": null, "subreddit_name_prefixed": "r/AskReddit", "author_flair_text": null, "treatment_tags": [], "created": 1666443375.0, "created_utc": 1666443375.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/AskReddit/comments/yabrxc/whats_a_subtle_sign_of_low_intelligence/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_30hhs", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Zelensky: Russia wants to buy time and regroup rather than hold real negotiations", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "UkrainianConflict", "link_author": "dl_friend", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "irgjiix", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 77, "can_mod_post": false, "send_replies": true, "parent_id": "t1_irfhq5p", "score": 1, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "What territory are you suggesting?  Transnistria?  Kaliningrad?  Perhaps St. Petersberg?", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What territory are you suggesting?  Transnistria?  Kaliningrad?  Perhaps St. Petersberg?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_xxyxt5", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/UkrainianConflict/comments/xxyxt5/zelensky_russia_wants_to_buy_time_and_regroup/irgjiix/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/UkrainianConflict/comments/xxyxt5/zelensky_russia_wants_to_buy_time_and_regroup/", "name": "t1_irgjiix", "author_flair_template_id": null, "subreddit_name_prefixed": "r/UkrainianConflict", "author_flair_text": null, "treatment_tags": [], "created": 1665183974.0, "created_utc": 1665183974.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.ukrinform.net/rubric-ato/3588234-zelensky-russia-wants-to-buy-time-and-regroup-rather-than-hold-real-negotiations.html"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh3l", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "US: Jewish American journalist sacked for calling Israel 'apartheid' state", "mod_reason_by": null, "banned_by": null, "ups": 33, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "news", "link_author": "OkAlbatross6560", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "irggosa", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "websnarf", "num_comments": 1875, "can_mod_post": false, "send_replies": true, "parent_id": "t1_irfok42", "score": 33, "author_fullname": "t2_2gkrg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "The Hill's \"Rising\" team has mostly moved on to another online show called \"Breaking Points\".  You can still watch Brianha Joy Gray on her show \"Bad Faith\".  There is little to nothing lost by blocking \"The Hill\" entirely.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;The Hill&amp;#39;s &amp;quot;Rising&amp;quot; team has mostly moved on to another online show called &amp;quot;Breaking Points&amp;quot;.  You can still watch Brianha Joy Gray on her show &amp;quot;Bad Faith&amp;quot;.  There is little to nothing lost by blocking &amp;quot;The Hill&amp;quot; entirely.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_xy6avi", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/news/comments/xy6avi/us_jewish_american_journalist_sacked_for_calling/irggosa/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/news/comments/xy6avi/us_jewish_american_journalist_sacked_for_calling/", "name": "t1_irggosa", "author_flair_template_id": null, "subreddit_name_prefixed": "r/news", "author_flair_text": null, "treatment_tags": [], "created": 1665182477.0, "created_utc": 1665182477.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.middleeastmonitor.com/20221003-us-jewish-american-journalist-sacked-for-calling-israel-apartheid-state/"}}], "before": null}}