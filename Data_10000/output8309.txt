{"kind": "Listing", "data": {"after": "t1_ep7km8r", "dist": 25, "modhash": null, "geo_filter": "", "children": [{"kind": "t1", "data": {"subreddit_id": "t5_2rb1o", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "I made a bouldering based card game", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "bouldering", "link_author": "editor22uk", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "hap10vt", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 44, "can_mod_post": false, "send_replies": true, "parent_id": "t3_pd4xog", "score": 2, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Are the pictures on the play cards (at least the 5 I see on the website) modeled after midnight lightning?", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Are the pictures on the play cards (at least the 5 I see on the website) modeled after midnight lightning?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_pd4xog", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/bouldering/comments/pd4xog/i_made_a_bouldering_based_card_game/hap10vt/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/bouldering/comments/pd4xog/i_made_a_bouldering_based_card_game/", "name": "t1_hap10vt", "author_flair_template_id": null, "subreddit_name_prefixed": "r/bouldering", "author_flair_text": null, "treatment_tags": [], "created": 1630166206.0, "created_utc": 1630166206.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://i.redd.it/m2o6evlvo1k71.jpg"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2rb1o", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "The Lost Decade - Portland - My favourite outdoor problem so far!", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "bouldering", "link_author": "BittersweetBuddah", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "h7cx6ke", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 21, "can_mod_post": false, "send_replies": true, "parent_id": "t1_h7c5axv", "score": 1, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Portland ME or Portland OR???", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Portland ME or Portland OR???&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_ovvkbi", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/bouldering/comments/ovvkbi/the_lost_decade_portland_my_favourite_outdoor/h7cx6ke/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/bouldering/comments/ovvkbi/the_lost_decade_portland_my_favourite_outdoor/", "name": "t1_h7cx6ke", "author_flair_template_id": null, "subreddit_name_prefixed": "r/bouldering", "author_flair_text": null, "treatment_tags": [], "created": 1627853871.0, "created_utc": 1627853871.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://v.redd.it/q1d8iogazre71"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Is there any chance of getting Cornell's CS3110 as a PDF?", "mod_reason_by": null, "banned_by": null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "gv13jx0", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "needuhLee", "num_comments": 9, "can_mod_post": false, "send_replies": true, "parent_id": "t1_gv0e20g", "score": 5, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Wow, in the class and already subscribed to /r/ocaml? Must be a good class", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Wow, in the class and already subscribed to &lt;a href=\"/r/ocaml\"&gt;/r/ocaml&lt;/a&gt;? Must be a good class&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_mtj9v2", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/mtj9v2/is_there_any_chance_of_getting_cornells_cs3110_as/gv13jx0/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/mtj9v2/is_there_any_chance_of_getting_cornells_cs3110_as/", "name": "t1_gv13jx0", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1618793689.0, "created_utc": 1618793689.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/mtj9v2/is_there_any_chance_of_getting_cornells_cs3110_as/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2scl9", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "A cool little way to repair your denim!", "mod_reason_by": null, "banned_by": null, "ups": 62, "num_reports": null, "author_flair_type": "richtext", "total_awards_received": 0, "subreddit": "rawdenim", "link_author": "Venca2000", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "gd84y1p", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": true, "collapsed_reason_code": null, "no_follow": false, "author": "needuhLee", "num_comments": 40, "can_mod_post": false, "send_replies": true, "parent_id": "t3_jyti4h", "score": 62, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "when your thighs can't fit PBJs but you still wanna flex...", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [{"e": "text", "t": "ST-220x, XX-012,  ST-120xk"}], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;when your thighs can&amp;#39;t fit PBJs but you still wanna flex...&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_jyti4h", "unrepliable_reason": null, "author_flair_text_color": "light", "score_hidden": false, "permalink": "/r/rawdenim/comments/jyti4h/a_cool_little_way_to_repair_your_denim/gd84y1p/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/rawdenim/comments/jyti4h/a_cool_little_way_to_repair_your_denim/", "name": "t1_gd84y1p", "author_flair_template_id": "b14a063e-7907-11e3-9ca8-12313b0b3603", "subreddit_name_prefixed": "r/rawdenim", "author_flair_text": "ST-220x, XX-012,  ST-120xk", "treatment_tags": [], "created": 1606058612.0, "created_utc": 1606058612.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": "#ea0027", "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://v.redd.it/ie8h5mcsvo061"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2ugo7", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "[GIVEAWAY] Jelly Key - Zen Pond III artisan keycaps", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "MechanicalKeyboards", "link_author": "jellykey", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "g5jprjv", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 19610, "can_mod_post": false, "send_replies": true, "parent_id": "t1_g5gvvhs", "score": 1, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "234", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;234&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_itvfjo", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/MechanicalKeyboards/comments/itvfjo/giveaway_jelly_key_zen_pond_iii_artisan_keycaps/g5jprjv/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/MechanicalKeyboards/comments/itvfjo/giveaway_jelly_key_zen_pond_iii_artisan_keycaps/", "name": "t1_g5jprjv", "author_flair_template_id": null, "subreddit_name_prefixed": "r/MechanicalKeyboards", "author_flair_text": null, "treatment_tags": [], "created": 1600312768.0, "created_utc": 1600312768.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://i.redd.it/9sjityc3hin51.jpg"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2ugo7", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "[Giveaway] Jelly Key - Born of Forest artisan keycaps", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "MechanicalKeyboards", "link_author": "jellykey", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "fvke1qs", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 14526, "can_mod_post": false, "send_replies": true, "parent_id": "t1_fvjrduu", "score": 1, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "114", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;114&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_hd9hcc", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/MechanicalKeyboards/comments/hd9hcc/giveaway_jelly_key_born_of_forest_artisan_keycaps/fvke1qs/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/MechanicalKeyboards/comments/hd9hcc/giveaway_jelly_key_born_of_forest_artisan_keycaps/", "name": "t1_fvke1qs", "author_flair_template_id": null, "subreddit_name_prefixed": "r/MechanicalKeyboards", "author_flair_text": null, "treatment_tags": [], "created": 1592768286.0, "created_utc": 1592768286.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://i.redd.it/cpcxcmxjfa651.jpg"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "OCaml 4.11.0, first alpha release", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "octachron", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "fprj2q0", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 7, "can_mod_post": false, "send_replies": true, "parent_id": "t1_fprgkdz", "score": 1, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "That's pretty cool!", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;That&amp;#39;s pretty cool!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_gekf3v", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/gekf3v/ocaml_4110_first_alpha_release/fprj2q0/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/gekf3v/ocaml_4110_first_alpha_release/", "name": "t1_fprj2q0", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1588855404.0, "created_utc": 1588855404.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/gekf3v/ocaml_4110_first_alpha_release/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "OCaml 4.11.0, first alpha release", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "octachron", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "fppqg7d", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 7, "can_mod_post": false, "send_replies": true, "parent_id": "t1_fpp4gck", "score": 2, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "ah got it, thanks, I don't really touch the class stuff so makes sense that I've never heard of it.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;ah got it, thanks, I don&amp;#39;t really touch the class stuff so makes sense that I&amp;#39;ve never heard of it.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_gekf3v", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/gekf3v/ocaml_4110_first_alpha_release/fppqg7d/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/gekf3v/ocaml_4110_first_alpha_release/", "name": "t1_fppqg7d", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1588807168.0, "created_utc": 1588807168.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/gekf3v/ocaml_4110_first_alpha_release/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "OCaml 4.11.0, first alpha release", "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "octachron", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "fpp2lr9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 7, "can_mod_post": false, "send_replies": true, "parent_id": "t3_gekf3v", "score": 3, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Maybe a noob question: what's a #-type?\n\n    - #9232: allow any class type paths in #-types,\n      For instance, \"val f: #F(X).t -&gt; unit\" is now allowed.\n\nIt's hard to google, so reference appreciated if there is one.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Maybe a noob question: what&amp;#39;s a #-type?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;- #9232: allow any class type paths in #-types,\n  For instance, &amp;quot;val f: #F(X).t -&amp;gt; unit&amp;quot; is now allowed.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&amp;#39;s hard to google, so reference appreciated if there is one.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_gekf3v", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/gekf3v/ocaml_4110_first_alpha_release/fpp2lr9/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/gekf3v/ocaml_4110_first_alpha_release/", "name": "t1_fpp2lr9", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1588794865.0, "created_utc": 1588794865.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/gekf3v/ocaml_4110_first_alpha_release/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Problem with reading integers from file into variables", "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "charles-foster-kane", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "fnbodpe", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 4, "can_mod_post": false, "send_replies": true, "parent_id": "t3_g0ib6d", "score": 3, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "As an important note, if the point of the class is to do things in a *functional* way, I would discourage from using the number of ref's you have -- this is written very imperatively.\n\nWhat I would do is something like the following\n\n- Read the lines of the file into a string list. You can use open_in to get an in_channel object, and then In_channel.input_lines to get this list.\n\n- match on the string list, demanding that the list has at least one element (the first line saying how many lines to expect), and throwing otherwise. here, you can also check that the number of lines is indeed equal to the number of lines asserted in the header, and that each line indeed contains 2 numbers separated by a space (I would suggest using [String.split] and [Int.of_string] here).\n\n- now, you have a list of lines, and you want to check that some test case passes for each line. I'm going to assume your function has signature\n\n        val test : ~n:int -&gt; ~k:int -&gt; unit\n\n    and throws an exception when a test case doesn't pass (if it's something else, let me know). Well, if you want to do something that returns unit for each element in a list, the usual pattern is to use List.iter.", "edited": 1586819809.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;As an important note, if the point of the class is to do things in a &lt;em&gt;functional&lt;/em&gt; way, I would discourage from using the number of ref&amp;#39;s you have -- this is written very imperatively.&lt;/p&gt;\n\n&lt;p&gt;What I would do is something like the following&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Read the lines of the file into a string list. You can use open_in to get an in_channel object, and then In_channel.input_lines to get this list.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;match on the string list, demanding that the list has at least one element (the first line saying how many lines to expect), and throwing otherwise. here, you can also check that the number of lines is indeed equal to the number of lines asserted in the header, and that each line indeed contains 2 numbers separated by a space (I would suggest using [String.split] and [Int.of_string] here).&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;now, you have a list of lines, and you want to check that some test case passes for each line. I&amp;#39;m going to assume your function has signature&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;val test : ~n:int -&amp;gt; ~k:int -&amp;gt; unit\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and throws an exception when a test case doesn&amp;#39;t pass (if it&amp;#39;s something else, let me know). Well, if you want to do something that returns unit for each element in a list, the usual pattern is to use List.iter.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_g0ib6d", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/g0ib6d/problem_with_reading_integers_from_file_into/fnbodpe/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/g0ib6d/problem_with_reading_integers_from_file_into/", "name": "t1_fnbodpe", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1586819172.0, "created_utc": 1586819172.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/g0ib6d/problem_with_reading_integers_from_file_into/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r4oc", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "[TOMT][song] - song with a voice sample saying \"you're special... you know that\"", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "tipofmytongue", "link_author": "needuhLee", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "fkzlyz9", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 2, "can_mod_post": false, "send_replies": true, "parent_id": "t3_flnpqt", "score": 1, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Commet - appreciate any help, thank you", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": true, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Commet - appreciate any help, thank you&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_flnpqt", "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden": false, "permalink": "/r/tipofmytongue/comments/flnpqt/tomtsong_song_with_a_voice_sample_saying_youre/fkzlyz9/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/tipofmytongue/comments/flnpqt/tomtsong_song_with_a_voice_sample_saying_youre/", "name": "t1_fkzlyz9", "author_flair_template_id": null, "subreddit_name_prefixed": "r/tipofmytongue", "author_flair_text": "1", "treatment_tags": [], "created": 1584674171.0, "created_utc": 1584674171.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": "", "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/tipofmytongue/comments/flnpqt/tomtsong_song_with_a_voice_sample_saying_youre/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Which FP language should I choose in 2020 fintech startup company? Ocaml, Haskell, or Scala?", "mod_reason_by": null, "banned_by": null, "ups": 19, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "zyzy5730", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "fcj61ac", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "needuhLee", "num_comments": 14, "can_mod_post": false, "send_replies": true, "parent_id": "t3_ehgkqa", "score": 19, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "I assume you've heard that jane street codes almost primarily in ocaml, and they're in a space similar to what it sounds like your company hopes to be. I work there and use the language, though I'm not a software developer in the strict sense. \n\nI obviously like the language (I'm subscribed here!), but in terms of whether the decision made sense, as you say there's pros and cons with every language decision and I'm sure it's the case here as well.  One meta benefit of choosing an FP language at all is you attract people who want to code in it.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I assume you&amp;#39;ve heard that jane street codes almost primarily in ocaml, and they&amp;#39;re in a space similar to what it sounds like your company hopes to be. I work there and use the language, though I&amp;#39;m not a software developer in the strict sense. &lt;/p&gt;\n\n&lt;p&gt;I obviously like the language (I&amp;#39;m subscribed here!), but in terms of whether the decision made sense, as you say there&amp;#39;s pros and cons with every language decision and I&amp;#39;m sure it&amp;#39;s the case here as well.  One meta benefit of choosing an FP language at all is you attract people who want to code in it.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_ehgkqa", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/ehgkqa/which_fp_language_should_i_choose_in_2020_fintech/fcj61ac/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/ehgkqa/which_fp_language_should_i_choose_in_2020_fintech/", "name": "t1_fcj61ac", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1577678141.0, "created_utc": 1577678141.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/ehgkqa/which_fp_language_should_i_choose_in_2020_fintech/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "[deleted by user]", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "f8735uq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 1, "can_mod_post": false, "send_replies": true, "parent_id": "t3_dzao5i", "score": 2, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "(Copying below a better formatted version if it helps anyone read the OP)\n\nHello!\n\nI am trying to write a simple test to learn `ppx_expect`. I am printing \"Hello\" and trying to expect the output. It works when using OCaml's `print_endline`, but does not work when using a foreign interface to C code. Please see examples below:\n\nWorking:\n\n    ```ocaml\n    external printf_hello : unit -&gt; unit  = \"caml_print_hello\"\n    let print_hello () = printf_hello ()\n\n    let%expect_test \"print hello\" =\n      print_endline ();\n      [%expect{|\n        Hello\n      |}]\n    ```\n\nNot working:\n\n    ```ocaml\n    external printf_hello : unit -&gt; unit  = \"caml_print_hello\"\n    let print_hello () = printf_hello ()\n    \n    let%expect_test \"print hello\" =\n      print_hello ();\n      [%expect{|\n        Hello\n      |}]\n    ```\n    \nWhen ran, it gives me the following diff:\n\n    ```diff\n    diff --git a/lib/hello_world.ml b/lib/hello_world.ml.corrected\n    index 969709c..ded5323 100644\n    --- a/lib/hello_world.ml\n    +++ b/lib/hello_world.ml.corrected\n    @@ -7,9 +7,7 @@ module HelloWorld = struct\n    \n       let%expect_test \"print hello\" =\n         print_hello ();\n    -    [%expect{|\n    -      Hello\n    -    |}]\n    +    [%expect{| |}]\n    ```\n\nI have confirmed the `print_hello` function works with an executable. Is this a bug with `ppx_expect`? Any insight is appreciated!", "edited": 1574314705.0, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;(Copying below a better formatted version if it helps anyone read the OP)&lt;/p&gt;\n\n&lt;p&gt;Hello!&lt;/p&gt;\n\n&lt;p&gt;I am trying to write a simple test to learn &lt;code&gt;ppx_expect&lt;/code&gt;. I am printing &amp;quot;Hello&amp;quot; and trying to expect the output. It works when using OCaml&amp;#39;s &lt;code&gt;print_endline&lt;/code&gt;, but does not work when using a foreign interface to C code. Please see examples below:&lt;/p&gt;\n\n&lt;p&gt;Working:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;```ocaml\nexternal printf_hello : unit -&amp;gt; unit  = &amp;quot;caml_print_hello&amp;quot;\nlet print_hello () = printf_hello ()\n\nlet%expect_test &amp;quot;print hello&amp;quot; =\n  print_endline ();\n  [%expect{|\n    Hello\n  |}]\n```\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Not working:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;```ocaml\nexternal printf_hello : unit -&amp;gt; unit  = &amp;quot;caml_print_hello&amp;quot;\nlet print_hello () = printf_hello ()\n\nlet%expect_test &amp;quot;print hello&amp;quot; =\n  print_hello ();\n  [%expect{|\n    Hello\n  |}]\n```\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When ran, it gives me the following diff:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;```diff\ndiff --git a/lib/hello_world.ml b/lib/hello_world.ml.corrected\nindex 969709c..ded5323 100644\n--- a/lib/hello_world.ml\n+++ b/lib/hello_world.ml.corrected\n@@ -7,9 +7,7 @@ module HelloWorld = struct\n\n   let%expect_test &amp;quot;print hello&amp;quot; =\n     print_hello ();\n-    [%expect{|\n-      Hello\n-    |}]\n+    [%expect{| |}]\n```\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I have confirmed the &lt;code&gt;print_hello&lt;/code&gt; function works with an executable. Is this a bug with &lt;code&gt;ppx_expect&lt;/code&gt;? Any insight is appreciated!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_dzao5i", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/dzao5i/deleted_by_user/f8735uq/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/dzao5i/deleted_by_user/", "name": "t1_f8735uq", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1574314406.0, "created_utc": 1574314406.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/dzao5i/deleted_by_user/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "How should I store a large, changing grid? (Pure functional preferred)", "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "FreakyCheeseMan", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "f6fwd65", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 7, "can_mod_post": false, "send_replies": true, "parent_id": "t1_f6f8x4v", "score": 3, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "You could save yourself a lot of hassle by just doing\n\n    type t = int * int [@@deriving sexp, compare]\n\nwithin `module T`\n\nI think the error you're getting in the first case is because you're not labeling the arguments, so it's assuming Int.compare is the first non-labeled argument, i.e. a `Tuple2.t `\n\nAlso, when you include `Comparable.Make(T)`, you get a `Location.Map`, so you could just do `Location.Map.empty`", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;You could save yourself a lot of hassle by just doing&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type t = int * int [@@deriving sexp, compare]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;within &lt;code&gt;module T&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I think the error you&amp;#39;re getting in the first case is because you&amp;#39;re not labeling the arguments, so it&amp;#39;s assuming Int.compare is the first non-labeled argument, i.e. a &lt;code&gt;Tuple2.t&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Also, when you include &lt;code&gt;Comparable.Make(T)&lt;/code&gt;, you get a &lt;code&gt;Location.Map&lt;/code&gt;, so you could just do &lt;code&gt;Location.Map.empty&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_dr4hv0", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/dr4hv0/how_should_i_store_a_large_changing_grid_pure/f6fwd65/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/dr4hv0/how_should_i_store_a_large_changing_grid_pure/", "name": "t1_f6fwd65", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1572818880.0, "created_utc": 1572818880.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/dr4hv0/how_should_i_store_a_large_changing_grid_pure/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "List.fold from Core isn't working", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "FreakyCheeseMan", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "f4406cq", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 9, "can_mod_post": false, "send_replies": true, "parent_id": "t1_f404ay0", "score": 1, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Awesome, thanks for trying it!", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Awesome, thanks for trying it!&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_diutfr", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/diutfr/listfold_from_core_isnt_working/f4406cq/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/diutfr/listfold_from_core_isnt_working/", "name": "t1_f4406cq", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1571346796.0, "created_utc": 1571346796.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/diutfr/listfold_from_core_isnt_working/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "List.fold from Core isn't working", "mod_reason_by": null, "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "FreakyCheeseMan", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "f401rly", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "needuhLee", "num_comments": 9, "can_mod_post": false, "send_replies": true, "parent_id": "t1_f4005mc", "score": 4, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "I personally like the labeled arguments because I think it makes it easier to read.\n\nFor example, you see something like this a lot:\n\n    let some_computation = \n      my_list\n      |&gt; List.map ~f:do_something\n      |&gt; List.fold ~init:foo ~f:bar\n\nand so on. It's nice that I'm not confused between which argument is the initial value and which is the function. It's also nice when writing code that I don't have to remember what order they go in. But totally agree this all comes down to preference. \n\n---\n\nAs a side note about wrappers, do you run into weird weak-polymorphism issues when you don't eta expand fold_x? I don't have a coding environment on this computer, but what I mean is does the following compile:\n\n    let x = [1; 2; 3; 4];;\n\n    let fold_x = List.fold_left x;;\n\n    let int_sum = fold_x ~init:0 ~f:(( + ))\n\n    let float_sum = fold_x ~init:0. ~f:(fun x y -&gt; Float.(of_int x +. of_int y))\n\nI would've thought that fold_x only has type\n\n    - : init:'_weak1 -&gt; f:('_weak1 -&gt; int -&gt; '_weak1) -&gt; '_weak1\n\ninstead of being completely general over `'a`, while if you wrote the explicit wrapper\n\n    let fold_x ~init ~f = List.fold_left x ~init ~f\n\nit would have the right type. I could definitely be wrong and I'm mostly just curious, I'm not an expert at all on this kind of stuff.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;I personally like the labeled arguments because I think it makes it easier to read.&lt;/p&gt;\n\n&lt;p&gt;For example, you see something like this a lot:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let some_computation = \n  my_list\n  |&amp;gt; List.map ~f:do_something\n  |&amp;gt; List.fold ~init:foo ~f:bar\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and so on. It&amp;#39;s nice that I&amp;#39;m not confused between which argument is the initial value and which is the function. It&amp;#39;s also nice when writing code that I don&amp;#39;t have to remember what order they go in. But totally agree this all comes down to preference. &lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;As a side note about wrappers, do you run into weird weak-polymorphism issues when you don&amp;#39;t eta expand fold_x? I don&amp;#39;t have a coding environment on this computer, but what I mean is does the following compile:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let x = [1; 2; 3; 4];;\n\nlet fold_x = List.fold_left x;;\n\nlet int_sum = fold_x ~init:0 ~f:(( + ))\n\nlet float_sum = fold_x ~init:0. ~f:(fun x y -&amp;gt; Float.(of_int x +. of_int y))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I would&amp;#39;ve thought that fold_x only has type&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;- : init:&amp;#39;_weak1 -&amp;gt; f:(&amp;#39;_weak1 -&amp;gt; int -&amp;gt; &amp;#39;_weak1) -&amp;gt; &amp;#39;_weak1\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;instead of being completely general over &lt;code&gt;&amp;#39;a&lt;/code&gt;, while if you wrote the explicit wrapper&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let fold_x ~init ~f = List.fold_left x ~init ~f\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;it would have the right type. I could definitely be wrong and I&amp;#39;m mostly just curious, I&amp;#39;m not an expert at all on this kind of stuff.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_diutfr", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/diutfr/listfold_from_core_isnt_working/f401rly/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/diutfr/listfold_from_core_isnt_working/", "name": "t1_f401rly", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1571282423.0, "created_utc": 1571282423.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/diutfr/listfold_from_core_isnt_working/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "List.fold from Core isn't working", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "FreakyCheeseMan", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "f3ziowj", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 9, "can_mod_post": false, "send_replies": true, "parent_id": "t3_diutfr", "score": 1, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "&gt; First, the type signature changes from what it is without core (I don't understand exactly how, but the order of arguments definitely changes)\n\nThere's native ocaml which has a List module containing a bunch of common functions like [fold_left], and then there's the Core module on top of it which exposes its own List module (with overlapping functions).  \n\nThese do the same thing, but the latter is more attuned to the general Jane Street style, namely where functions are labeled ~f and, in the case of fold, the starting value named ~init.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;First, the type signature changes from what it is without core (I don&amp;#39;t understand exactly how, but the order of arguments definitely changes)&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;There&amp;#39;s native ocaml which has a List module containing a bunch of common functions like [fold_left], and then there&amp;#39;s the Core module on top of it which exposes its own List module (with overlapping functions).  &lt;/p&gt;\n\n&lt;p&gt;These do the same thing, but the latter is more attuned to the general Jane Street style, namely where functions are labeled ~f and, in the case of fold, the starting value named ~init.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_diutfr", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/diutfr/listfold_from_core_isnt_working/f3ziowj/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/diutfr/listfold_from_core_isnt_working/", "name": "t1_f3ziowj", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1571269944.0, "created_utc": 1571269944.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/diutfr/listfold_from_core_isnt_working/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "How to run projects compiled with js_of_ocaml and dune", "mod_reason_by": null, "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "igna92ts", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "f3e5iq4", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "needuhLee", "num_comments": 8, "can_mod_post": false, "send_replies": true, "parent_id": "t1_f3d0972", "score": 4, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "iirc js_of_ocaml is why core_kernel was separated from core", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;iirc js_of_ocaml is why core_kernel was separated from core&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_dgh5lm", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/dgh5lm/how_to_run_projects_compiled_with_js_of_ocaml_and/f3e5iq4/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/dgh5lm/how_to_run_projects_compiled_with_js_of_ocaml_and/", "name": "t1_f3e5iq4", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1570858654.0, "created_utc": 1570858654.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/dgh5lm/how_to_run_projects_compiled_with_js_of_ocaml_and/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "OCaml 4.09.0", "mod_reason_by": null, "banned_by": null, "ups": 5, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "apoisel", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "f0qs49o", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "needuhLee", "num_comments": 11, "can_mod_post": false, "send_replies": true, "parent_id": "t3_d5xzol", "score": 5, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "What does \"New optimisations, in particular for affine functions in matches\" mean?", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;What does &amp;quot;New optimisations, in particular for affine functions in matches&amp;quot; mean?&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_d5xzol", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/d5xzol/ocaml_4090/f0qs49o/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/d5xzol/ocaml_4090/", "name": "t1_f0qs49o", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1568865308.0, "created_utc": 1568865308.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://github.com/ocaml/ocaml/releases/tag/4.09.0"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r4oc", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "[TOMT] [SONG] [2000s rock(??)]", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "tipofmytongue", "link_author": "BrainDoWantNotWork", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ey71f0s", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 240, "can_mod_post": false, "send_replies": true, "parent_id": "t3_cvse7p", "score": 2, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "stay together for the kids - blink 182\n\nnot super similar lyrics but upbeat &amp; melancholy for sure", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;stay together for the kids - blink 182&lt;/p&gt;\n\n&lt;p&gt;not super similar lyrics but upbeat &amp;amp; melancholy for sure&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_cvse7p", "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden": false, "permalink": "/r/tipofmytongue/comments/cvse7p/tomt_song_2000s_rock/ey71f0s/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/tipofmytongue/comments/cvse7p/tomt_song_2000s_rock/", "name": "t1_ey71f0s", "author_flair_template_id": null, "subreddit_name_prefixed": "r/tipofmytongue", "author_flair_text": "1", "treatment_tags": [], "created": 1566869227.0, "created_utc": 1566869227.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": "", "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/tipofmytongue/comments/cvse7p/tomt_song_2000s_rock/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2rb1o", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "My first V3!", "mod_reason_by": null, "banned_by": null, "ups": 4, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "bouldering", "link_author": "Lalalaska", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ett2cfd", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": false, "author": "needuhLee", "num_comments": 25, "can_mod_post": false, "send_replies": true, "parent_id": "t1_etsr342", "score": 4, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Yep! I personally think this V3 is one of the harder ones set right now. The two holds OP is on when they reposition their feet feel pretty bad to me.", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Yep! I personally think this V3 is one of the harder ones set right now. The two holds OP is on when they reposition their feet feel pretty bad to me.&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_cdavng", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/bouldering/comments/cdavng/my_first_v3/ett2cfd/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/bouldering/comments/cdavng/my_first_v3/", "name": "t1_ett2cfd", "author_flair_template_id": null, "subreddit_name_prefixed": "r/bouldering", "author_flair_text": null, "treatment_tags": [], "created": 1563162347.0, "created_utc": 1563162347.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://v.redd.it/w5vcb4pi9da31"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2r4oc", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "[TOMT] Movie from about 10 years ago where a guy is trapped inside a burning car being murdered by a serial killer, possibly gay subtext", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "tipofmytongue", "link_author": "[deleted]", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "er9awqw", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 16, "can_mod_post": false, "send_replies": true, "parent_id": "t3_c0y6ft", "score": 1, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "probably not the right answer, but the end of american beauty features a killing, gay subtext, rain, and cars", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;probably not the right answer, but the end of american beauty features a killing, gay subtext, rain, and cars&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_c0y6ft", "unrepliable_reason": null, "author_flair_text_color": "dark", "score_hidden": false, "permalink": "/r/tipofmytongue/comments/c0y6ft/tomt_movie_from_about_10_years_ago_where_a_guy_is/er9awqw/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/tipofmytongue/comments/c0y6ft/tomt_movie_from_about_10_years_ago_where_a_guy_is/", "name": "t1_er9awqw", "author_flair_template_id": null, "subreddit_name_prefixed": "r/tipofmytongue", "author_flair_text": "1", "treatment_tags": [], "created": 1560620500.0, "created_utc": 1560620500.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": "", "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/tipofmytongue/comments/c0y6ft/tomt_movie_from_about_10_years_ago_where_a_guy_is/"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0z", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "\"Actually, it's only a semigroup once it's defined in terms of an *associative* operation. Before that, it's magma.\"", "mod_reason_by": null, "banned_by": null, "ups": 3, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "xkcd", "link_author": "abcq02", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "eq0u4gm", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 8, "can_mod_post": false, "send_replies": true, "parent_id": "t1_epzlv4j", "score": 3, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "true, though in this case \"free\" is a word which carries enough meaning in other contexts that it would be pretty silly to name it something else", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;true, though in this case &amp;quot;free&amp;quot; is a word which carries enough meaning in other contexts that it would be pretty silly to name it something else&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_bwlbh8", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/xkcd/comments/bwlbh8/actually_its_only_a_semigroup_once_its_defined_in/eq0u4gm/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/xkcd/comments/bwlbh8/actually_its_only_a_semigroup_once_its_defined_in/", "name": "t1_eq0u4gm", "author_flair_template_id": null, "subreddit_name_prefixed": "r/xkcd", "author_flair_text": null, "treatment_tags": [], "created": 1559694425.0, "created_utc": 1559694425.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://en.wikipedia.org/wiki/Magma_(algebra)"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh0z", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "\"Actually, it's only a semigroup once it's defined in terms of an *associative* operation. Before that, it's magma.\"", "mod_reason_by": null, "banned_by": null, "ups": 2, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "xkcd", "link_author": "abcq02", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "eq0tyf2", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 8, "can_mod_post": false, "send_replies": true, "parent_id": "t1_epzda2z", "score": 2, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "BanAnaMan, the category of banach analytic manifolds", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;BanAnaMan, the category of banach analytic manifolds&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_bwlbh8", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/xkcd/comments/bwlbh8/actually_its_only_a_semigroup_once_its_defined_in/eq0tyf2/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/xkcd/comments/bwlbh8/actually_its_only_a_semigroup_once_its_defined_in/", "name": "t1_eq0tyf2", "author_flair_template_id": null, "subreddit_name_prefixed": "r/xkcd", "author_flair_text": null, "treatment_tags": [], "created": 1559694304.0, "created_utc": 1559694304.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://en.wikipedia.org/wiki/Magma_(algebra)"}}, {"kind": "t1", "data": {"subreddit_id": "t5_2qh60", "approved_at_utc": null, "author_is_blocked": false, "comment_type": null, "link_title": "Are GADTs just fancy function overloading", "mod_reason_by": null, "banned_by": null, "ups": 1, "num_reports": null, "author_flair_type": "text", "total_awards_received": 0, "subreddit": "ocaml", "link_author": "jacobp100", "likes": null, "replies": "", "user_reports": [], "saved": false, "id": "ep7km8r", "banned_at_utc": null, "mod_reason_title": null, "gilded": 0, "archived": false, "collapsed_reason_code": null, "no_follow": true, "author": "needuhLee", "num_comments": 11, "can_mod_post": false, "send_replies": true, "parent_id": "t3_bu2vx0", "score": 1, "author_fullname": "t2_57ikg", "over_18": false, "report_reasons": null, "removal_reason": null, "approved_by": null, "controversiality": 0, "body": "Can't answer your question very well at all, but theres a Jane street blog post titled \"why GADTs matter for performance\" that gives a neat example for a use besides eval over an AST", "edited": false, "top_awarded_type": null, "downs": 0, "author_flair_css_class": null, "is_submitter": false, "collapsed": false, "author_flair_richtext": [], "author_patreon_flair": false, "body_html": "&lt;div class=\"md\"&gt;&lt;p&gt;Can&amp;#39;t answer your question very well at all, but theres a Jane street blog post titled &amp;quot;why GADTs matter for performance&amp;quot; that gives a neat example for a use besides eval over an AST&lt;/p&gt;\n&lt;/div&gt;", "gildings": {}, "collapsed_reason": null, "distinguished": null, "associated_award": null, "stickied": false, "author_premium": false, "can_gild": true, "link_id": "t3_bu2vx0", "unrepliable_reason": null, "author_flair_text_color": null, "score_hidden": false, "permalink": "/r/ocaml/comments/bu2vx0/are_gadts_just_fancy_function_overloading/ep7km8r/", "subreddit_type": "public", "link_permalink": "https://www.reddit.com/r/ocaml/comments/bu2vx0/are_gadts_just_fancy_function_overloading/", "name": "t1_ep7km8r", "author_flair_template_id": null, "subreddit_name_prefixed": "r/ocaml", "author_flair_text": null, "treatment_tags": [], "created": 1559083011.0, "created_utc": 1559083011.0, "awarders": [], "all_awardings": [], "locked": false, "author_flair_background_color": null, "collapsed_because_crowd_control": null, "mod_reports": [], "quarantine": false, "mod_note": null, "link_url": "https://www.reddit.com/r/ocaml/comments/bu2vx0/are_gadts_just_fancy_function_overloading/"}}], "before": null}}